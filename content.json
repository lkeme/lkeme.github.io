{"meta":{"title":"沐雨露の山头","subtitle":"懒若新生","description":"平平淡淡、知冷知热","author":"Mudew","url":"https://Mudew.com"},"pages":[{"title":"friends","date":"2018-06-05T18:53:13.000Z","updated":"2019-06-11T10:08:06.000Z","comments":true,"path":"friends/index.html","permalink":"https://Mudew.com/friends/index.html","excerpt":"","text":"PY交易现场 @timeline{ 2020@item{ 4月3日“MikuBlog”https://mikublog.com } @item{ 4月3日“镜态极研”https://kagamiz.com/ } @item{ 4月3日“Dawnnnnn”https://dawnnnnnn.com/ } 2019@item{ 6月6日“疯猫哟”https://www.fcat.me/ } @item{ 6月5日“汤一碗”https://blog.uliuli.fun/ } 2018}"},{"title":"whispering","date":"2018-06-05T18:53:13.000Z","updated":"2019-06-11T10:08:06.000Z","comments":true,"path":"whispering/index.html","permalink":"https://Mudew.com/whispering/index.html","excerpt":"","text":"静语 @timeline{ 2019@item{ 6月16日吃不到的醋是酸的。 } @item{ 6月13日热情总会变冷淡,不是每次你回来我都在。 } @item{ 6月11日人一生，人海茫茫里，遇到自己真正喜欢的人真的很不容易。 } 2018}"}],"posts":[{"title":"Ubuntu20.04编译安装Python3","slug":"Ubuntu20.04编译安装Python3","date":"2021-06-04T08:32:53.000Z","updated":"2021-06-03T04:14:20.857Z","comments":true,"path":"20210604/compile-and-install-python3-on-ubuntu2004/","link":"","permalink":"https://Mudew.com/20210604/compile-and-install-python3-on-ubuntu2004/","excerpt":"","text":"前言记录下安装过程，以便日后查看。 Ubuntu 20.04.2 LTS (使用的Docker ubuntu:latest，可能会与其他环境略有不同。) Python 3.9.5 (发布前最新版本，其他版本操作相通。) 以下操作都是基于ROOT权限下操作，如果不是或者权限不足，请在命令前添加 sudo 环境依赖 切换阿里云镜像源加速，Ubuntu 20.04，网络较好可以跳过，如需其他源请自行搜索替换。 12345678910111213141516171819# 备份cp /etc/apt/sources.list /etc/apt/sources.list.backup# 写入echo \"deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\" &gt; /etc/apt/sources.list# 更新apt update &amp;&amp; apt upgrade -y 安装编译Python需要的依赖包，全面安装，为了编译后不出现各种问题，宁错杀一千不放过一个包。 1234# 看需求安装 有些包是编译PHP用的 懒得拆分了 有强迫症的可以试试apt install gcc make wget curl build-essential autoconf automake m4 openssl libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev -yapt install libbz2-dev libxml2-dev libjpeg-dev libpng-dev libfreetype6-dev libzip-dev libssl-dev libsqlite3-dev libcurl4-openssl-dev libgmp3-dev libonig-dev libreadline-dev libxslt1-dev libffi-dev -y# apt install libpcre3-dev libjpeg62-dev libpng12-dev libpng3 libpnglite-dev libiconv-hook-dev libiconv-hook1 libmcrypt-dev libmcrypt4 libmhash-dev libmhash2 libltdl-dev libmysqlclient-dev libmagickcore-dev libmagickwand-dev libedit-dev -y 下载 选择需要的版本下载XZ Compressed source tabball，下载速度慢可以考虑镜像下载。 Python下载官网 | Python3.9.5 Python下载镜像 | Python3.9.5 12wget https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tar.xz# wget https://npm.taobao.org/mirrors/python/3.9.5/Python-3.9.5.tar.xz 安装以Python3.9.5安装为例 123456789101112131415161718# 解包，解压缩xz -d Python-3.9.5.tar.xztar -xvf Python-3.9.5.tar# 进入目录cd Python-3.9.5# 编译./configure --prefix=/usr/local/python3.9.5 --enable-optimizations# --prefix=/usr/local/python3.9.5 预安装目录# --enable-optimizations 是优化选项(LTO，PGO 等)加上这个 flag 编译后，性能有 10% 左右的优化(看需求)# 安装make &amp;&amp; make install# 创建软链接 方便使用ln -s /usr/local/python3.9.5/bin/python3.9 /usr/local/bin/python3.9ln -s /usr/local/python3.9.5/bin/pip3.9 /usr/local/bin/pip3.9 等待编译完成即可，如果没有什么其他的报错，应该就OK的。 使用 使用python3.9 xxx.py和pip3.9 install xxxx 怎么喜欢怎么来 123456789101112131415161718192021222324252627root@de9bc33b1a58:~# pip3.9 -Vpip 21.1.1 from /usr/local/python3.9.5/lib/python3.9/site-packages/pip (python 3.9)root@de9bc33b1a58:~# python3.9 -VPython 3.9.5root@de9bc33b1a58:~# python3.9Python 3.9.5 (default, Jun 3 2021, 12:04:16)[GCC 9.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import requests&gt;&gt;&gt; print(requests.get(&quot;http://ip-api.com/json&quot;).json())&#123; &quot;status&quot;:&quot;success&quot;, &quot;country&quot;:&quot;China&quot;, &quot;countryCode&quot;:&quot;*&quot;, &quot;region&quot;:&quot;*&quot;, &quot;regionName&quot;:&quot;*&quot;, &quot;city&quot;:&quot;*&quot;, &quot;zip&quot;:&quot;&quot;, &quot;lat&quot;:*, &quot;lon&quot;:*, &quot;timezone&quot;:&quot;Asia/Shanghai&quot;, &quot;isp&quot;:&quot;*&quot;, &quot;org&quot;:&quot;&quot;, &quot;as&quot;:&quot;*&quot;, &quot;query&quot;:&quot;*&quot;&#125;&gt;&gt;&gt; PIP源123456789清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：https://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/豆瓣：https://pypi.doubanio.com/simple/# pip3.9 install xxxx -i https://pypi.tuna.tsinghua.edu.cn/simple END.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://Mudew.com/tags/Python/"}]},{"title":"和彩云网盘研究记录","slug":"和彩云网盘研究记录","date":"2021-03-23T04:25:45.000Z","updated":"2021-03-23T02:46:05.878Z","comments":true,"path":"20210323/he-caiyun-net-disk-research-record/","link":"","permalink":"https://Mudew.com/20210323/he-caiyun-net-disk-research-record/","excerpt":"","text":"前言清一色的开篇，目的只为水一篇文章…本次研究对象 和彩云网盘(mCloud)7.3.4此记录更偏向于结果，只保证研究版本有效，去年分析的，今年才发，不保证有效 栗子 账密方式登录 123456789101112131415161718192021222324252627282930313233343536373839POST https://aas.caiyun.feixin.10086.cn/tellin/thirdlogin.do HTTP/1.1x-DeviceInfo: 1|10.0.3.15|1|7.3.4|Netease|MuMu|87AD2EDF19FFE5D7779D4191937FD5F0|08-00-27-e5-3d-e6|android 6.0.1|900X1600|zh|||x-ExpRoute-Code: routeCode=18880886001,type=10Accept-Charset: UTF-8x-NetType: 1x-MM-Source: 000x-SvcType: 1Accept: text/html,application/xhtml+xml,application/xml;Connection: keep-alivex-huawei-channelSrc: 10000023X-Tingyun-Id: p35OnrDoP8k;c=2;r=1339375589;Content-Type: text/plain; charset=utf-8Content-Length: 344Host: aas.caiyun.feixin.10086.cnAccept-Encoding: gzipUser-Agent: okhttp/3.11.0&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;msisdn&gt;18880886001&lt;/msisdn&gt;&lt;random/&gt;&lt;secinfo&gt;871D0A9E95ABA22B4604224CFBA24E605FABBC34&lt;/secinfo&gt;&lt;version&gt;572&lt;/version&gt;&lt;clienttype&gt;414&lt;/clienttype&gt;&lt;pintype&gt;9&lt;/pintype&gt;&lt;dycpwd/&gt;&lt;cpid&gt;58&lt;/cpid&gt;&lt;verfycode/&gt;&lt;requestip&gt;10.0.2.15&lt;/requestip&gt;&lt;mac/&gt;&lt;extInfo/&gt;&lt;UID/&gt;&lt;loginMode&gt;1&lt;/loginMode&gt;&lt;srvInfoVer/&gt;&lt;/root&gt;# 账密正确情况HTTP/1.1 200 OKSet-Cookie: JSESSIONID=DE25E78BB56608CD1C186B867BF33C67; Path=/tellin/; Secure; HttpOnlyContent-Type: text/plain;charset=utf-8Content-Length: 4992Date: Sun, 25 Oct 2020 04:35:41 GMTServer: HTTPS8F5060F5F1158B1CD0C081BA51C02C12DAD4C8F839CE2E44954B1DFE5A7C0137F0FA3FEB366B23A7B9EB4535AC403D0CDF26EB5973C647B26BEB85EBDCA65595AFFC1149A6D387........# 账密错误情况HTTP/1.1 200 OKSet-Cookie: JSESSIONID=87D4DF3AB2ABD9A5CEB777E26419377F; Path=/tellin/; Secure; HttpOnlyContent-Type: text/plain;charset=utf-8Content-Length: 86Date: Sun, 25 Oct 2020 04:33:13 GMTServer: HTTPS&lt;root&gt;&lt;return&gt;200050401&lt;/return&gt;&lt;desc&gt;The user information is incorrect.&lt;/desc&gt;&lt;/root&gt; 观察以上登录请求发现加密的东西不少，请求头、请求体、响应体都有不同程度的加密 请求头(Request Headers)只写几个比较重要的，大部分可以为空或者默认值 x-DeviceInfo1x-DeviceInfo: 1|10.0.3.15|1|7.3.4|Netease|MuMu|87AD2EDF19FFE5D7779D4191937FD5F0|08-00-27-e5-3d-e6|android 6.0.1|900X1600|zh||| 包含的东西比较多，以|分隔数据 ，下面表格按分割后的数据显示 原始数据 代表内容 1(1) 网络类型 10.0.3.15 IP地址 1(2) 固定默认 7.3.4 SDK版本 Netease MANUFACTURER MuMu MODEL 87AD2EDF19FFE5D7779D4191937FD5F0 生成UUID 08-00-27-e5-3d-e6 MAC地址 android 6.0.1 ANDROID版本 900X1600 分辨率 zh 默认值 空 空 空 空 x-ExpRoute-Code1x-ExpRoute-Code: routeCode=18880886001,type=10 原始数据 代表内容 routeCode 手机号 type 如果是手机号登录 默认值为10 请求体(Request Payload)内容组成为XML，大部分可以为空或者默认值 XML123456789101112131415161718&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;root&gt; &lt;msisdn&gt;18880886001&lt;/msisdn&gt; &lt;random/&gt; &lt;secinfo&gt;871D0A9E95ABA22B4604224CFBA24E605FABBC34&lt;/secinfo&gt; &lt;version&gt;572&lt;/version&gt; &lt;clienttype&gt;414&lt;/clienttype&gt; &lt;pintype&gt;9&lt;/pintype&gt; &lt;dycpwd/&gt; &lt;cpid&gt;58&lt;/cpid&gt; &lt;verfycode/&gt; &lt;requestip&gt;10.0.2.15&lt;/requestip&gt; &lt;mac/&gt; &lt;extInfo/&gt; &lt;UID/&gt; &lt;loginMode&gt;1&lt;/loginMode&gt; &lt;srvInfoVer/&gt;&lt;/root&gt; 以下sha-1()、md5()等代表加密方式 , {}代表字符串拼接填充 原始数据 代表内容 secinfo sha-1(fetion.com.cn:{password}) 响应体(Response Payload)密文登录成功后，返回数据为一长串密文，需要搭配上下文的东西解密使用 128F5060F5F1158B1CD0C081BA51C02C12DAD4C8F839CE2E44954B1DFE5A7C0137F0FA3FEB366B23A7B9EB4535AC403D0CDF26EB5973C647B26BEB85EBDCA65595AFFC1149A6D387........ 123456# 拼接字符串add_key = GErfJus#Ofr%# 秘钥算法clientkeyDecrypt = md5(&#123;secinfo&#125;&#123;add_key&#125;) -&gt; substring(0, 16) -&gt; toUpperCase()# 解密算法result = AES() -&gt; decodeCerResponse(byte(response), byte(clientkeyDecrypt)) 算法为AES加密解密(ECB模式) , 解密秘钥为以上clientkeyDecryptclientkeyDecrypt 为MD5后取前16位转大写 , ECB模式无填充解密即可 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;root&gt; &lt;return&gt;0&lt;/return&gt; &lt;imspwd&gt;E7E673CD95AEF839206A15A62AFE60E5&lt;/imspwd&gt; &lt;sbc&gt;&lt;/sbc&gt; &lt;domain&gt;&lt;/domain&gt; &lt;svnlist&gt;&lt;/svnlist&gt; &lt;svnuser&gt;&lt;/svnuser&gt; &lt;svnpwd&gt;&lt;/svnpwd&gt; &lt;htslist&gt;&lt;/htslist&gt; &lt;userType&gt;1&lt;/userType&gt; &lt;userid&gt;1711h52AR1yI&lt;/userid&gt; &lt;loginid&gt;160334480555369&lt;/loginid&gt; &lt;heartime&gt;4&lt;/heartime&gt; &lt;funcId&gt;1000000000000000&lt;/funcId&gt; &lt;token&gt;gquJ43xQ|1|RCS|1605936805651|BnEaDQrCg8cUJ1Mp4GjV1.dmGoOVrB0meR52eij8PBOOtkY8x3c5MI92EP_rBWg4tuPUOLExb.wl724cetD5rUHz5BlW5OzaMK0Z6SiA52Kst0Nvt.sBnIi4bYK8x5etKwRZeTUya6ULgApq_vQgTdM9pCaqnaKiDV1vqBGXkaQ-&lt;/token&gt; &lt;expiretime&gt;2592000&lt;/expiretime&gt; &lt;authToken&gt;gquJ43xQ|1|RCS|1605936805651|BnEaDQrCg8cUJ1Mp4GjV1.dmGoOVrB0meR52eij8PBOOtkY8x3c5MI92EP_rBWg4tuPUOLExb.wl724cetD5rUHz5BlW5OzaMK0Z6SiA52Kst0Nvt.sBnIi4bYK8x5etKwRZeTUya6ULgApq_vQgTdM9pCaqnaKiDV1vqBGXkaQ-&lt;/authToken&gt; &lt;atExpiretime&gt;2592000&lt;/atExpiretime&gt; &lt;deviceid&gt;5617A97CE3EA4B7187F4A6D84CB02880&lt;/deviceid&gt; &lt;serverinfo&gt; &lt;mbhttpsurl&gt;https://ose1.caiyun.feixin.10086.cn:8542/isbo/openApi/&lt;/mbhttpsurl&gt; &lt;fburl&gt;http://mrp.weibo.10086.cn&lt;/fburl&gt; &lt;editurl&gt;http://edit.caiyun.feixin.10086.cn&lt;/editurl&gt; &lt;mediaurl&gt;http://120.132.156.103:80&lt;/mediaurl&gt; &lt;cmpassurl&gt;https://www.cmpassport.com&lt;/cmpassurl&gt; &lt;cytxlurl&gt;https://auth.cytxl.com.cn&lt;/cytxlurl&gt; &lt;fxcaptchaurl&gt;http://nav.fetion.com.cn&lt;/fxcaptchaurl&gt; &lt;xmppaddr&gt;221.176.66.104:5225,221.176.66.104:5226,221.176.66.104:5227&lt;/xmppaddr&gt; &lt;boshurl&gt;221.176.66.104:8081,221.176.66.104:8082,221.176.66.104:8083&lt;/boshurl&gt; &lt;marketurl&gt;http://mcmm.caiyun.feixin.10086.cn:80&lt;/marketurl&gt; &lt;invitecodeurl&gt;http://caiyun.feixin.10086.cn/i.jsp&lt;/invitecodeurl&gt; &lt;pingurl&gt;http://221.176.66.99:80&lt;/pingurl&gt; &lt;rifurl&gt;http://ose.caiyun.feixin.10086.cn:80/richlifeApp&lt;/rifurl&gt; &lt;wapUrl&gt;http://caiyun.feixin.10086.cn:7070&lt;/wapUrl&gt; &lt;rifhttpsurl&gt;https://ose.caiyun.feixin.10086.cn:443/richlifeApp&lt;/rifhttpsurl&gt; &lt;chargeUrl&gt;https://cmmedia.caiyun.feixin.10086.cn:443&lt;/chargeUrl&gt; &lt;isboUrl&gt;https://ose1.caiyun.feixin.10086.cn:8542&lt;/isboUrl&gt; &lt;calURL&gt;http://ose.caiyun.feixin.10086.cn/richlifeApp&lt;/calURL&gt; &lt;testTermConnectURL&gt;http://aas.caiyun.feixin.10086.cn/tellin/usr/puc/ispace/testTermConnect.do&lt;/testTermConnectURL&gt; &lt;/serverinfo&gt; &lt;account&gt;15802336010&lt;/account&gt; &lt;expiryDate&gt;-1&lt;/expiryDate&gt; &lt;areaCode&gt;23&lt;/areaCode&gt; &lt;provCode&gt;23&lt;/provCode&gt; &lt;userExtInfo&gt; &lt;passID&gt;844163976&lt;/passID&gt; &lt;AndID&gt;844163976&lt;/AndID&gt; &lt;isRegWeibo&gt;-1&lt;/isRegWeibo&gt; &lt;accessToken&gt;NTE1MUFCNjcxMTM2RjA1QTg3N0VBOUU4ODQzRjE3QkIyOEY2RjQ4Qzk5RUY4NUFDMEVBODMxOEQyRTk2NEU1ODo0NDYxMDE=&lt;/accessToken&gt; &lt;/userExtInfo&gt; &lt;srvInfoVer&gt;D071457A5A1AE65EADDB39E38EE3A2F8&lt;/srvInfoVer&gt;&lt;/root&gt;\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f 注意解密后数据尾部有N个\\x0f or \\x0b or \\x0c or \\x06可能为其他不同的字符，最好写通用匹配方式去除 实现 仓库地址 和彩云-内容加解密代码逻辑比较简单，详情施工中… 总结该文章代码只为学习，麻烦未经允许禁止转载哦 END.","categories":[],"tags":[{"name":"CaiYun","slug":"CaiYun","permalink":"https://Mudew.com/tags/CaiYun/"},{"name":"10086","slug":"10086","permalink":"https://Mudew.com/tags/10086/"},{"name":"feixin","slug":"feixin","permalink":"https://Mudew.com/tags/feixin/"},{"name":"网盘","slug":"网盘","permalink":"https://Mudew.com/tags/网盘/"},{"name":"逆向","slug":"逆向","permalink":"https://Mudew.com/tags/逆向/"}]},{"title":"Bilibili Web端直播加密心跳请求解析","slug":"Bilibili-Web端直播加密心跳请求解析","date":"2020-07-22T05:11:38.000Z","updated":"2020-07-22T10:39:17.505Z","comments":true,"path":"20200722/bilibili-webside-live-broadcast-encryption-heartbeat-request-analysis/","link":"","permalink":"https://Mudew.com/20200722/bilibili-webside-live-broadcast-encryption-heartbeat-request-analysis/","excerpt":"","text":"前言清一色的开篇，目的只为水一篇文章…这次是Bilibili Web端直播心跳API一个加解密算法去年写的东西，放着一直没怎么使用，一直懒就没写…以下所有数据都脱敏处理或者打码，不要作测试数据… Bilibili Live如果研究的朋友，可能都抓过包看过数据包的情况有两个关键请求，分别为reportEnterRoom和reportHeartBeat两个请求在不同状态下带入一个加密参数 s reportEnterRoom https://live-trace.bilibili.com/xlive/data-interface/v1/x25Kn/EE请求在心跳流程中只请求一次，进入房间 12345678910111213# E 1id: [1,145,0,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ts: 1595348574562is_patch: 0heart_beat: []ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: &#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;timestamp&quot;:1595348575,&quot;heartbeat_interval&quot;:300,&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;,&quot;secret_rule&quot;:[2,5,1,4],&quot;patch_status&quot;:2&#125;&#125; is_patch == 0 -&gt; heart_beat == [] 一般直接使用这个 123# E 2is_patch: 1heart_beat: [&#123;&quot;s&quot;:&quot;jjh64tcxjjjd062s2sfxfkrcey63a0z1jc9hrkjyy4d9436fib9wj0pynwmncpeib9i4ckjxmnkw1e0h41mn86fir47yzcafrspzrp05i9rnf0dbje6ndcsk3f1bm4th&quot;,&quot;id&quot;:&quot;[6,235,1,123456]&quot;,&quot;device&quot;:&quot;[\\&quot;AUTO3915894629123456\\&quot;,\\&quot;7b9faf1a-cdd0-45a7-8355-e68972550341\\&quot;]&quot;,&quot;ets&quot;:1595248610,&quot;benchmark&quot;:&quot;seacasdgyijfhofiuxoannn&quot;,&quot;time&quot;:285,&quot;ts&quot;:1595248894609,&quot;ua&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64&quot;&#125;] is_patch == 1 -&gt; heart_beat == [**] 短时间内重复进出直播间触发 reportHeartBeat https://live-trace.bilibili.com/xlive/data-interface/v1/x25Kn/XX请求在心跳流程中按次循环，必须先E再循环请求X 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# X 1s: d6fb6f7fdef8de9262e2b27ff6ef185a8d2ff72ce68f0a3648797e146bd655d6f5aab5e8f46826cde306267de149ae439a8ed6c3ce1e22220f2af498be1d144fid: [1,145,1,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595348575benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595348874823ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595348875,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125;# X 2s: 8323ed71eac733c50956f46fbe10023826270197ee4af09c6ef036c1a798005298036de230bfc8ecde2e4018ee232884a2a813d89d12d701ab16f5c23d685ec9id: [1,145,2,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595348875benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595349175008ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595349175,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125; # X 3s: 369b18326a99fff5b5556da14039f807f21030e390de6f204a53d0cab0cccba7f0d0bcc60347f8fc43d9905be775f0c0fcdab4dd9bd6c8a52465f4a19b35cf36id: [1,145,3,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595349175benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595349475071ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595349475,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125;# X 4s: b9486ab176a70d444c7e34aa2f35c09270365fd15f5fc023036a426165d38a6fa831cde17de8a37007c53fcb204cfc0155167647c42bca263007068a42774592id: [1,145,4,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595349475benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595349775262ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595349775,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125; Parameter 参数注意数据规律，除了参数s，以下几个参数比较重要 NAME DESCRIBE REMARKS ts 请求时间 null ets 可从E-&gt;X*n依次从回显中取值 null id 大分区、小分区、轮次、长位直播间 null secret_rule 加密规则 null heartbeat_interval 请求之间的休眠 null secret_key 加密规则 null 设备、版本不同可能存在参数差异 逻辑这里只贴一下大概的流程，具体的细节可以看后面的代码加密前明文主要是一些直播参数，以及dom、’window’、document加密部分是一个wasm文件，带入参数以及secret_rule等加密加密后密文是一个128位的HASH值解密过程就是一场艰苦的和JS玩捉迷藏的游戏 进入直播间和循环心跳 外层调用心跳以及计算SIGN 初始化Wasm 调用Wasm加密Spyder (加密不止一轮) Spyder本体 (cargo-web) 深度可以看看wasm2wat demo Demo 只是贴出大概步骤，跳转并只不是一个js文件里发生 实现 仓库地址 哔哩哔哩 Web端直播加密心跳请求解析代码逻辑比较简单，详情施工中 总结文章写的比较乱不全，会贴出加解密部分，剩下的东西自己分析了该文章代码只为学习，麻烦未经允许禁止转载哦 靠别人写全部代码，不太可能，大家都是鸽子，咕咕咕！ END.","categories":[],"tags":[{"name":"Bilibili","slug":"Bilibili","permalink":"https://Mudew.com/tags/Bilibili/"},{"name":"Live","slug":"Live","permalink":"https://Mudew.com/tags/Live/"},{"name":"Heartbeat","slug":"Heartbeat","permalink":"https://Mudew.com/tags/Heartbeat/"},{"name":"Wasm","slug":"Wasm","permalink":"https://Mudew.com/tags/Wasm/"},{"name":"Js","slug":"Js","permalink":"https://Mudew.com/tags/Js/"}]},{"title":"Bilibili Android客户端播放API数据包解析","slug":"Bilibili-Android客户端播放数据包解析","date":"2019-06-11T07:52:14.000Z","updated":"2020-07-22T10:39:17.134Z","comments":true,"path":"20190611/bilibili-android-client-playback-api-packet-analysis/","link":"","permalink":"https://Mudew.com/20190611/bilibili-android-client-playback-api-packet-analysis/","excerpt":"","text":"前言博客也很久没水了，从日更周更到N月更，不知道写一些什么好…这次是Bilibili客户端播放API的一个加解密算法，也折腾了我一段时间，东西写好很久了，一直懒就没写… BiliBili如果研究的朋友，可能都抓过包看过数据包的情况 如图所示，播放计数的API，以及请求头、请求体、返回值 API: https://api.bilibili.com/x/report/click/android2 请求头的数据还是比较正常，但是看到请求体部分，瞬间懵圈了是一片乱码字符串，看了整个播放过程的API，只有这个是加密乱码的如果不是某段时间出现的代码，我也不知道这个是什么算法。 加解密必要秘钥等 NAME VALUE TYPE DESCRIBE AES_KEY fd6b639dbcff0c2a1b03b389ec763c4b string null AES_IV 77b07a672d57d64c string null SHA256_SALT 9cafa6466a028bfb string null 这只适用于安卓客户端，和ios客户端等是不通用的 解密解密，主要是为了解出请求参数有些什么，就不贴太多代码在博客上了 解密过程主要就是一个AES解密，暂时用不到Sha256 salt 图中红框内黑色部分数据就是加密的请求体，下面我们来解密参数 黑色部分数据Copy as Base64(因为我的解密代码是基于Base64的) 拆分出来的一部分加解密代码放到了Github哔哩哔哩-App客户端播放参数加解密 解密部分我就不多说了，秘钥等都贴出来了，能折腾的就慢慢折腾我就直接直接贴出解出来的参数，参数比较多 这是登陆后的播放参数 NAME VALUE DESCRIBE access_key f3ae492*0c51 null aid 123456 null auto_play 0 可为0-2 cid 654321 null did BT**4a 和设备相关 epid 0 null ftime 1558340481 null lv 4 null mid 1234 null part 1 分P sid 0 null stime 1558416933 null sub_type 0 null type 3 null sign 22bb3**cdb01b9 sha256加密 这是不登陆的播放参数 NAME VALUE DESCRIBE aid 123456 null cid 654321 null did BT**4a 和设备相关 ftime 1558416933 null lv 0 null mid null 值为空 part 1 分P stime 1558416933 null 设备、版本不同可能存在参数差异 加密大概的加密过程 AES加密( 参数排序(para) + Sha256Hash+salt加密(sign) ) 我就贴一下一部分代码，知道怎么用就好了 12345678910111213141516data = &#123; 'aid': '123456', 'cid': '654321', 'did': 'string', 'ftime': '112233', 'lv': '0', 'mid': '', 'part': '1', 'stime': '112233'&#125;temp_data = urlencode(data)print(temp_data)# aid=123456&amp;cid=654********=&amp;part=1&amp;stime=112233payload = aes_enc(f\"&#123;temp_data&#125;&amp;sign=&#123;hashlib_sha256(temp_data)&#125;\")print(payload)# b'\\xb2\\x8a%\\xef\\xc0\\x18******************0' 代码环境Python3，参数随便写的，还是得按照你自己的解密参数来贴出来的代码只是一部分，基于github上的代码 SHA256 HASH SALT123456def hashlib_sha256(data, salt='9cafa6466a028bfb'): data = bytes(data, encoding='utf-8') salt = bytes(salt, encoding='utf-8') hash = hashlib.sha256(data) hash.update(salt) return hash.hexdigest() AES ENC DECAES的就不贴了，有点长，可以自己去看 总结文章写的比较乱不全，只会贴出加解密部分，剩下的东西自己分析了该文章代码只为学习，麻烦未经允许禁止转载哦最后再贴一遍仓库地址 哔哩哔哩-App客户端播放参数加解密 靠别人写全部代码，不太可能，大家都是鸽子，咕咕咕！ END.","categories":[],"tags":[{"name":"Bilibili","slug":"Bilibili","permalink":"https://Mudew.com/tags/Bilibili/"},{"name":"Watch","slug":"Watch","permalink":"https://Mudew.com/tags/Watch/"},{"name":"Android","slug":"Android","permalink":"https://Mudew.com/tags/Android/"},{"name":"AES","slug":"AES","permalink":"https://Mudew.com/tags/AES/"},{"name":"SHA256","slug":"SHA256","permalink":"https://Mudew.com/tags/SHA256/"}]},{"title":"Django2.2以上针对Sqlite3版本不匹配","slug":"Django2-2以上针对Sqlite3版本不匹配","date":"2019-04-17T03:51:43.000Z","updated":"2020-07-22T10:39:17.135Z","comments":true,"path":"20190417/django22-and-above-do-not-match-the-version-of-sqlite3/","link":"","permalink":"https://Mudew.com/20190417/django22-and-above-do-not-match-the-version-of-sqlite3/","excerpt":"","text":"前言很久没有水博客了，在运行一个Django项目的时， 服务器版本大概Centos7.2，新机器花了点时候安装完需要的环境和依赖，本想一发入魂直接成功的，昨天在Ubuntu上成功运行，结果Centos就给我整个报错。 123.....raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)django.core.exceptions.ImproperlyConfigured: SQLite 3.8.3 or later is required (found 3.7.17). 就是Django查到的Sqlite的版本不对，找到的是3.7.17，但是对版本要求(version &lt;= 3.8.3)，爬了一下资料，在Django版本说明中看到 12# SQLite的最低支持版本从3.7.15增加到3.8.3The minimum supported version of SQLite is increased from 3.7.15 to 3.8.3. 这就得升级Sqlite3的版本了 下载Sqlite 下载官网Sqlite 3.28.0 选择需要的版本下载Source Code -&gt; sqlite-autoconf* 安装以写博客时的最新版安装为例 123456789101112131415# 下载$ wget http://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz# 解包$ tar -zxvf sqlite-autoconf-3280000.tar.gz# 进入目录$ cd sqlite-autoconf-3280000# 配置 $ ./configure # --prefix=/usr/local 预安装目录(可选)# 编译$ make &amp;&amp; sudo make install 等待编译完成即可，如果没有什么其他的报错，应该就OK的。 测试如果是Centos7，yum更新了最新的Sqlite，默认的版本应该是3.7.17，1234567891011121314151617181920# 备份默认的sqlite$ sudo mv -v /usr/bin/sqlite3 /usr/bin/sqlite3.7.17\"/usr/bin/sqlite3\" -&gt; \"/usr/bin/sqlite3.7.17\"# 复制新版本的sqlite文件夹# 此时目录 sqlite-autoconf-3280000$ sudo cp -v sqlite3 /usr/bin \"sqlite3\" -&gt; \"/usr/bin/sqlite3\"# 查看一下文件是否成功$ ls /usr/bin |grep sqlitesqlite3sqlite3.7.17# 共享库$ export LD_LIBRARY_PATH=\"/usr/local/lib\"# 如果登出后失效的，可以写进~/.bashrc 或 ~/.bash_profile 使用1234567891011121314151617181920212223242526272829# 版本查看$ sqlite3 --version3.28.0 2019-04-16 19:49:53 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50# Python调用Sqlite版本查看$ python3.6Python 3.6.8 (default, Apr 16 2019, 14:31:25) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linuxType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import sqlite3&gt;&gt;&gt; sqlite3.sqlite_version'3.28.0'&gt;&gt;&gt; exit()# 运行Django$ python3.6 manage.pyType 'manage.py help &lt;subcommand&gt;' for help on a specific subcommand.Available subcommands:[auth] changepassword createsuperuser[contenttypes] remove_stale_contenttypes... 正常了，没有版本不匹配的报错了。其实主要sqlite3是yum源的最新版本才3.7.17，别卸载它后再装(跳过坑)，yum依赖sqlite，所以只有编译安装或者其他方式安装后替换文件目录。 另外要注意的是，sudo python3.6 &amp; python3.6的执行结果是不同的。 sudo不一定能读到新版本的Sqlite，窝再去爬爬文章待补充。 文章比较乱，机器差异什么的或许有不同，仅供参考。 参考文章: Django2.2で開発サーバー起動時にSQLite3のエラーが出た場合の対応 END.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://Mudew.com/tags/Python/"},{"name":"Sqlite","slug":"Sqlite","permalink":"https://Mudew.com/tags/Sqlite/"},{"name":"Django","slug":"Django","permalink":"https://Mudew.com/tags/Django/"},{"name":"Centos","slug":"Centos","permalink":"https://Mudew.com/tags/Centos/"}]},{"title":"CentOS 7搭建开源签到项目教程","slug":"CentOS-7搭建开源签到项目教程","date":"2018-10-09T10:07:45.000Z","updated":"2019-06-11T10:08:07.000Z","comments":true,"path":"20181009/centos-7-build-open-source-signin-project-tutorial/","link":"","permalink":"https://Mudew.com/20181009/centos-7-build-open-source-signin-project-tutorial/","excerpt":"","text":"前言Centos7.5/Python2.7 准备工作 一台正常工作的VPS 准备一个域名用于解析(可选) 开源项目签到 —— 一个自动签到框架 base on an HAR editor 签到(项目)签到(模板) 搭建部署Centos1234# 开发工具包yum groupinstall \"Development Tools\" -yyum install python-devel mysql-connector-python git -ypip install tornado==4.5.3 u-msgpack-python jinja2 chardet requests pbkdf2 pycrypto Ubuntu or Debian12apt-get install python-dev autoconf g++ python-pbkdf2pip install tornado u-msgpack-python jinja2 chardet requests pbkdf2 pycrypto 克隆项目12git clone https://github.com/binux/qiandao.gitcd qiandao 运行项目12345# 后台运行yum install screen -yscreen -S qiandao# 运行python ./run.py 成功的话访问http://ip:8923/ 登陆注册设置管理员1python ./chrole.py your@email.address admin 模板的话可以在主站下载，也可以自己做，都有教程的。 反向代理基本使用用ip访问就好，如果有要求域名的话，就使用反向代理吧123yum install nginx -ysystemctl start nginxvim /etc/nginx/nginx.conf conf配置123456789101112131415server &#123; listen 80; #替换域名 server_name domain.com; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; proxy_set_header Host $host; proxy_set_header X-Real-Ip $remote_addr; proxy_set_header X-Forwarded-For $remote_addr; proxy_pass http://localhost:8923; &#125; &#125; nginx -t然后重启服务 1systemctl restart nginx 开机自启1systemctl enable nginx 这样就能通过域名访问了 教程很乱，当文档看吧，针对有基础的，很多小细节都没多写。 End…","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://Mudew.com/tags/python/"},{"name":"centos","slug":"centos","permalink":"https://Mudew.com/tags/centos/"},{"name":"开源","slug":"开源","permalink":"https://Mudew.com/tags/开源/"}]},{"title":"如何给Python threading线程加个控制开关","slug":"如何给Python-threading线程加个控制开关","date":"2018-10-02T16:36:19.000Z","updated":"2020-07-22T10:39:17.142Z","comments":true,"path":"20181003/how-to-add-a-control-switch-python-threading-thread/","link":"","permalink":"https://Mudew.com/20181003/how-to-add-a-control-switch-python-threading-thread/","excerpt":"","text":"前言Python3.6.6/threading/threading.Event,如何给每个线程加一个控制开关。 需求分析在爬虫项目中,threading模块的使用率还是很高的,每个线程之间独立,如果一个线程成功完成了任务退出了，其他的线程还要继续跑吗? 会造成资源浪费,如何给线程之间弄个信号源,一个线程完成任务,其他线程及退出呢?当然可能有很多方法完成目的,我只把自己使用过的方法做个记录。 实践test.py12345678910111213141516171819202122232425262728293031323334353637383940414243444546import randomimport threadingclass Calculation(threading.Thread): def __init__(self, signal): threading.Thread.__init__(self) # 开关控制 self.singal = signal def run(self): self.test() return def test(self): while True: num = random.randint(0, 100) print(threading.currentThread(), num) # 如果其他线程完成任务打开开关,当前线程就退出 if self.singal.isSet(): print(threading.currentThread(), '其他线程已经完成任务,退出!') break # 如果随机数符合了条件,就把开关打开 if num == 66: print(threading.currentThread(), '当前线程完成任务,退出!') self.singal.set() break returnif __name__ == '__main__': # 初始“开关” ，默认值 False event_obj = threading.Event() # 线程列表 threads_list = [] # 开始线程 5个线程 for thread in range(0, 5): threads_list.append(Calculation(signal=event_obj)) for t in threads_list: t.start() # for t in threads: # t.join() 看看输出结果,也没什么其他好说的123456789101112131415161718192021222324252627282930313233343536373839# 数据太长,删过一部分,重要的流程还在# \\Pythonvenv\\py3\\Scripts\\python.exe test.py&lt;Calculation(Thread-1, started 24500)&gt; 1&lt;Calculation(Thread-1, started 24500)&gt; 34&lt;Calculation(Thread-1, started 24500)&gt; 60&lt;Calculation(Thread-1, started 24500)&gt; 13&lt;Calculation(Thread-2, started 24400)&gt; 36&lt;Calculation(Thread-2, started 24400)&gt; 60&lt;Calculation(Thread-1, started 24500)&gt; 80&lt;Calculation(Thread-3, started 13304)&gt; 19&lt;Calculation(Thread-2, started 24400)&gt; 87&lt;Calculation(Thread-1, started 24500)&gt; 97&lt;Calculation(Thread-3, started 13304)&gt; 36&lt;Calculation(Thread-2, started 24400)&gt; 3&lt;Calculation(Thread-1, started 24500)&gt; 2&lt;Calculation(Thread-4, started 18092)&gt; 38&lt;Calculation(Thread-5, started 16736)&gt; 62&lt;Calculation(Thread-3, started 13304)&gt; 33&lt;Calculation(Thread-2, started 24400)&gt; 20&lt;Calculation(Thread-2, started 24400)&gt; 97&lt;Calculation(Thread-2, started 24400)&gt; 58&lt;Calculation(Thread-2, started 24400)&gt; 23&lt;Calculation(Thread-5, started 16736)&gt; 37&lt;Calculation(Thread-3, started 13304)&gt; 91&lt;Calculation(Thread-1, started 24500)&gt; 13&lt;Calculation(Thread-4, started 18092)&gt; 11&lt;Calculation(Thread-2, started 24400)&gt; 16&lt;Calculation(Thread-2, started 24400)&gt; 66&lt;Calculation(Thread-2, started 24400)&gt; 当前线程完成任务,退出!&lt;Calculation(Thread-3, started 13304)&gt; 64&lt;Calculation(Thread-1, started 24500)&gt; 19&lt;Calculation(Thread-4, started 18092)&gt; 92&lt;Calculation(Thread-5, started 16736)&gt; 24&lt;Calculation(Thread-3, started 13304)&gt; 其他线程已经完成任务,退出!&lt;Calculation(Thread-1, started 24500)&gt; 其他线程已经完成任务,退出!&lt;Calculation(Thread-4, started 18092)&gt; 其他线程已经完成任务,退出!&lt;Calculation(Thread-5, started 16736)&gt; 其他线程已经完成任务,退出!Process finished with exit code 0 知识点12345678910111213# 定义一个开关obj = threading.Event() # 把开关传进每个线程# 查看开关的状态,返回True或False,默认值 Falseobj.isSet()# 打开开关,此时值为Trueobj.set()# 关闭开关,此时值为Falseobj.clear() End.","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://Mudew.com/tags/python/"},{"name":"threading","slug":"threading","permalink":"https://Mudew.com/tags/threading/"}]},{"title":"Python3.6中遇到UnicodeEncodeError错误","slug":"Python3-6中遇到UnicodeEncodeError错误","date":"2018-10-02T16:04:32.000Z","updated":"2020-07-22T10:39:17.139Z","comments":true,"path":"20181003/encountered-unicodeencodeerror-in-python36/","link":"","permalink":"https://Mudew.com/20181003/encountered-unicodeencodeerror-in-python36/","excerpt":"","text":"前言Centos7.3/Python3.6.6|中文语言包的安装及中文支持 报错新系统配置Python环境,运行项目出现编码错误。 1UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in ordinal not in range(128) 查错 遇事不决问百度，万裁难断询谷歌 一开始搜索发现大部分文章分析是代码编码问题,后来尝试无果。后来猜测可能是编译Python时系统环境编码有问题,经过一通操作，果然解决了，查询了一下，发现网络上果然有些朋友栽在这个坑里,就记录一下解决方案。 解决安装语言12# 包括了\"zh_CN\"yum groupinstall \"fonts\" 查看一下是否安装成功12# 如果有\"zh_CN\"什么的，应该就成功了locale -a |grep \"zh_CN\" 修改语言12vim /etc/locale.conf# LANG=\"zh_CN.UTF-8\" 查看语言12# 查看系统语言变量locale 会出现好几个”zh_CN.UTF-8”就正常的 12# 查看语言包locale -a 如果没有出现错误,就表示中文已经安装成功了,可以尝试一下在终端上操作一下安装删除等操作,看能不能正常输出中文,如果出现错误就单独安装一下。 123# 只针对Centos7 , 6版本是不一样的yum install kde-l10n-Chineseyum reinstall glibc-common 如果一切没有的问题的话,就可以重新编译一下Python3环境。 END.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://Mudew.com/tags/Python/"}]},{"title":"让Python多线程响应Ctrl+C","slug":"让Python多线程响应Ctrl-C","date":"2018-09-23T12:31:51.000Z","updated":"2018-10-02T17:10:29.000Z","comments":true,"path":"20180923//","link":"","permalink":"https://Mudew.com/20180923/","excerpt":"","text":"前言Python的threading模块，没有提供线程退出的方法。如果程序多线程是死循环，即使CTRL+C也没有任何效果。 响应方法12345678for t in thread_list: # 设置守护 t.setDaemon(True) t.start()# 响应Ctrl+Cwhile True: pass 补充setDaemon(True):，是把子线程设置为守护线程，主线程和子线程会同时运行，主线程结束运行后，无论子线程运行与否，都会和主线程一起结束。所以我们结束空循环的时候，子线程也会退出。 join():join函数会使得主调线程阻塞，直到被调用线程运行结束或超时，才执行主线程。 只需要设置守护线程，挂一个空循环就好了 End.","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://Mudew.com/tags/python/"},{"name":"threading","slug":"threading","permalink":"https://Mudew.com/tags/threading/"}]},{"title":"Centos7编译安装Python3","slug":"Centos7编译安装Python3","date":"2018-09-17T08:32:53.000Z","updated":"2019-06-11T10:08:07.000Z","comments":true,"path":"20180917/centos7-compile-and-install-python3/","link":"","permalink":"https://Mudew.com/20180917/centos7-compile-and-install-python3/","excerpt":"","text":"前言Centos7.5/Python3.6.6，记录下安装过程，以便日后查看 依赖123yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make -y# 看需求安装yum groupinstall \"Development Tools\" -y 下载Python下载官网Python3.6.6 选择需要的版本下载XZ Compressed source tabball 安装以Python3.6.6安装为例 1234567891011121314# 解包，解压缩xz -d Python-3.6.6.tar.xztar -xvf Python-3.6.6.tar# 进入目录cd Python-3.6.6# 编译./configure --prefix=/usr/local/python3.6.6 --enable-optimizations# --prefix=/usr/local/python3.6.6 预安装目录# --enable-optimizations 是优化选项(LTO，PGO 等)加上这个 flag 编译后，性能有 10% 左右的优化(看需求)# 安装make &amp;&amp; make install 等待编译完成即可，如果没有什么其他的报错，应该就OK的。 使用怎么喜欢怎么来12ln -s /usr/local/python3.6.6/bin/python3.6 /usr/local/bin/python3.6ln -s /usr/local/python3.6.6/bin/pip3.6 /usr/local/bin/pip3.6 使用python3.6 xxx.py和pip3.6 install xxxx END.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://Mudew.com/tags/Python/"}]},{"title":"Python常用下载函数","slug":"Python常用下载函数","date":"2018-07-20T22:32:17.000Z","updated":"2020-07-22T10:39:17.139Z","comments":true,"path":"20180721/python-commonly-used-download-functions/","link":"","permalink":"https://Mudew.com/20180721/python-commonly-used-download-functions/","excerpt":"","text":"前言常用比较万金油的下载函数，记录方便下次调用。 代码12345678910import requestsdef downloadData(url, **kwargs): try: res = requests.get(url, **kwargs) res.raise_for_status() res.encoding = res.apparent_encoding return res.text except: return None **kwargs 允许你将不定长度的键值对, 作为参数传递给一个函数。如果你想要在一个函数里处理带名字的参数, 你应该使用**kwargs。 END.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://Mudew.com/tags/Python/"}]},{"title":"Python3.6安装Twisted报错解决","slug":"Python3-6安装Twisted报错解决","date":"2018-07-20T22:05:51.000Z","updated":"2020-07-22T10:39:17.141Z","comments":true,"path":"20180721/python36-installation-twisted-error-resolution/","link":"","permalink":"https://Mudew.com/20180721/python36-installation-twisted-error-resolution/","excerpt":"","text":"前言Centos7.4/Python3.6.6 报错安装Scrapy时需要Twisted依赖，使用pip3 install Twisted安装，但是报了一个错误。 1This is the last Twisted release where... 查错 遇事不决问百度，万裁难断询谷歌 经过一番搜索后，问题是Twisted模块和高版本Python有兼容性问题，可以选择在官网下载文件然后编译安装。 解决Twisted官网 去官网下载对应的版本，我这里选一个目前最新版本，是支持Python3.6的 123456789101112131415# 下载wget https://twistedmatrix.com/Releases/Twisted/18.7/Twisted-18.7.0.tar.bz2# ...# 解压tar -xvf Twisted-18.7.0.tar.bz2#...# 进入目录cd Twisted-18.7.0# ...# 编译安装python3 setup.py install# ... 等待编译完成即可，如果没有什么其他的报错，应该就OK的。 END.","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"https://Mudew.com/tags/Python/"}]},{"title":"Docker随记","slug":"Docker随记","date":"2018-04-28T04:31:50.000Z","updated":"2019-06-11T10:08:06.000Z","comments":true,"path":"20180428/docker-notes/","link":"","permalink":"https://Mudew.com/20180428/docker-notes/","excerpt":"","text":"前言记录一些Docker的使用 文档 Docker文档 容器服务 服务商 阿里云 灵雀云 DaoCloud DockerHub add… 运行12345678docker run -it -p local_port:container_port --name=\"example\" -v local_path:container_path image_id /bin/bash# -i, --interactive=false 打开STDIN，用于控制台交互 # -t, --tty=false 分配tty设备，该可以支持终端登录，默认为false# -v, --volume=[] 给容器挂载存储卷，挂载到容器的某个目录 # --name=\"nginx-lb\" 为容器指定一个名称# -d 后台启动# -p 指定端口 查看12345docker ps -a# 查看容器列表# -a，查看所有容器包括停止状态的容器 # -l，查看最新创建的容器 # -n=x，查看最后创建的x个容器 12CONTAINER ID| IMAGE| COMMAND| CREATED| STATUS| PORTS| NAMES 容器ID|使用的镜像|运行时的命令|创建时间|运行状态|对外开放的端口|容器名称 123docker imagesdocker image ls# 查看镜像列表 12REPOSITORY|TAG|IMAGE ID|CREATED|SIZE仓库名|标签(版本)|镜像ID|创建时间|大小 启动12docker start 容器名或容器ID # 容器进入运行状态，当容器完成任务后，会自己退出，进入停止状态 终止1docker stop 容器名或容器ID 删除12docker rm 容器名或容器ID# 删除容器,前提要容器没有运行 12docker rm `docker ps -a -q`# 一次性删除所有容器 12docker rmi 镜像名或者镜像ID# 删除镜像 进入12docker attach 容器名或# attach进入容器的活动会话进程 12docker exec -it 容器ID /bin/bash# exec进入容器启动一个新的交互 日志12docker logs 容器名或容器ID# 查看容器里在干什么 12docker top 容器名或容器ID# 查看容器里的进程 结束End","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://Mudew.com/tags/Docker/"},{"name":"笔记","slug":"笔记","permalink":"https://Mudew.com/tags/笔记/"}]},{"title":"Bilibili Android的Sign算法","slug":"Bilibili-Android的Sign算法","date":"2018-03-21T01:08:27.000Z","updated":"2020-07-22T10:39:17.138Z","comments":true,"path":"20180321/sign-algorithm-of-bilibili-android/","link":"","permalink":"https://Mudew.com/20180321/sign-algorithm-of-bilibili-android/","excerpt":"","text":"前言Bilibili客户端API的Sign验证算法 BiliBilisign的拼接 md5加密( 参数排序(para) + App内置(appsecret) ) 排序按key排序, key1=value1&amp;key2=value2&amp;key3=value3 AppsecretApp内置的私钥,抓包可见 appsecret=ea85624dfcf12d7cc7b2b3a94fac1f2c(栗子) 最后加密前应该是key1=value1&amp;key2=value2&amp;key3=value3ea85624dfcf12d7cc7b2b3a94fac1f2c 附上一个php的栗子12345678910111213/** * $data array * $appSecret string * return string */function createSign($data,)&#123; $appSecret = 'ea85624dfcf12d7cc7b2b3a94fac1f2c'; ksort($data); $url_build = http_build_query($data); return md5(http_build_query($data) . $appSecret); &#125; END.","categories":[],"tags":[{"name":"Bilibili","slug":"Bilibili","permalink":"https://Mudew.com/tags/Bilibili/"},{"name":"Sign","slug":"Sign","permalink":"https://Mudew.com/tags/Sign/"}]},{"title":"Node&npm笔记","slug":"Node-npm笔记","date":"2018-03-21T01:06:35.000Z","updated":"2018-03-21T01:36:42.000Z","comments":true,"path":"20180321//","link":"","permalink":"https://Mudew.com/20180321/","excerpt":"","text":"前言记一些Node&amp;Npm使用记录 Node升级以下命令,Linux可能需要权限 npm install -g nn latest 如果windows下面报错,windows版本可以尝试下载官方的msi软件包覆盖安装,也是可行的 Npm升级 npm install -g npm Npm更新更新全局可更新的包 npm update -g 更新package.json可更新的包 npm update 检查npm包的状态 npm-check -u -g 查看哪些包有更新 npm -g outdated 全局安装 npm install -g Nrm的使用安装 npm install -g nrm 使用显示registry可用列表 nrm ls 12345678$ nrm ls* npm ---- https://registry.npmjs.org/ cnpm --- http://r.cnpmjs.org/ eu ----- http://registry.npmjs.eu/ au ----- http://registry.npmjs.org.au/ sl ----- http://npm.strongloop.com/ nj ----- https://registry.nodejitsu.com/ 使用registry nrm use cnpm 123$ nrm use cnpm &gt;&gt;&gt; Registry has been set to: http://r.cnpmjs.org/ 测试registry的延迟 nrm test END.","categories":[],"tags":[{"name":"Node","slug":"Node","permalink":"https://Mudew.com/tags/Node/"},{"name":"Npm","slug":"Npm","permalink":"https://Mudew.com/tags/Npm/"}]},{"title":"Laravel5.6入门(六)","slug":"Laravel5-6入门-六","date":"2018-02-23T10:31:43.000Z","updated":"2020-07-22T10:39:17.130Z","comments":true,"path":"20180223/introduction-to-laravel56-6/","link":"","permalink":"https://Mudew.com/20180223/introduction-to-laravel56-6/","excerpt":"前言laravel5.6学习记录，学习最新的版本","text":"前言laravel5.6学习记录，学习最新的版本 Laravel文档Laravel 开发工具Phpstorm 开发环境Homestead 中文文档Laravel-China ComposerComposer Laravel5.6 数据库讲了控制器和路由，我们来讲一下数据库. 配置要使用数据库，当然要先配置，才能连上数据库使用.数据库的配置主要有两个地方. .env文件，包涵较多的配置项，当然也包括数据库的信息， config/database.php 里面包括了数据库、数据库驱动、Redis等. 1234567//.envDB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=homesteadDB_USERNAME=homesteadDB_PASSWORD=secret 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//config/database.php&lt;?phpreturn [ 'default' =&gt; env('DB_CONNECTION', 'mysql'), 'connections' =&gt; [ 'sqlite' =&gt; [ 'driver' =&gt; 'sqlite', 'database' =&gt; env('DB_DATABASE', database_path('database.sqlite')), 'prefix' =&gt; '', ], 'mysql' =&gt; [ 'driver' =&gt; 'mysql', 'host' =&gt; env('DB_HOST', '127.0.0.1'), 'port' =&gt; env('DB_PORT', '3306'), 'database' =&gt; env('DB_DATABASE', 'forge'), 'username' =&gt; env('DB_USERNAME', 'forge'), 'password' =&gt; env('DB_PASSWORD', ''), 'unix_socket' =&gt; env('DB_SOCKET', ''), 'charset' =&gt; 'utf8mb4', 'collation' =&gt; 'utf8mb4_unicode_ci', 'prefix' =&gt; '', 'strict' =&gt; true, 'engine' =&gt; null, ], 'pgsql' =&gt; [ 'driver' =&gt; 'pgsql', 'host' =&gt; env('DB_HOST', '127.0.0.1'), 'port' =&gt; env('DB_PORT', '5432'), 'database' =&gt; env('DB_DATABASE', 'forge'), 'username' =&gt; env('DB_USERNAME', 'forge'), 'password' =&gt; env('DB_PASSWORD', ''), 'charset' =&gt; 'utf8', 'prefix' =&gt; '', 'schema' =&gt; 'public', 'sslmode' =&gt; 'prefer', ], 'sqlsrv' =&gt; [ 'driver' =&gt; 'sqlsrv', 'host' =&gt; env('DB_HOST', 'localhost'), 'port' =&gt; env('DB_PORT', '1433'), 'database' =&gt; env('DB_DATABASE', 'forge'), 'username' =&gt; env('DB_USERNAME', 'forge'), 'password' =&gt; env('DB_PASSWORD', ''), 'charset' =&gt; 'utf8', 'prefix' =&gt; '', ], ], 'migrations' =&gt; 'migrations', 'redis' =&gt; [ 'client' =&gt; 'predis', 'default' =&gt; [ 'host' =&gt; env('REDIS_HOST', '127.0.0.1'), 'password' =&gt; env('REDIS_PASSWORD', null), 'port' =&gt; env('REDIS_PORT', 6379), 'database' =&gt; 0, ], ],]; 配置项都很简单，数据库名、账号、密码、端口设置上就ok.配置文件的可读性很高.database中用的env()函数读取.env文件的配置项. 123'default' =&gt; env('DB_CONNECTION', 'mysql'),//env(),传两个参数，第一个是`.env`里的配置项，第二个是默认值.//如果配置项没有值，就使用设置的默认值. 看你的需求，如果不会更换的就可以写死，也就是写到默认值里，如果频繁更换，或者线下线上的配置区分，就写到.env里，上线只需要改一份配置就好了. .env 在.gitignore中，是属于git忽略文件，也能保证一些安全问题，这里不细说. 修改配置的时候，我们也可以顺便修改下通用配置. 1234567//.envAPP_NAME=LaravelAPP_ENV=localAPP_KEY=base64:****************=APP_DEBUG=trueAPP_URL=http://localhost//名称、环境、是否开启debug(显示一些详细错误信息)、以及域名等. 12345678//我们主要改几个地方,其他的按照自己的需求//上面的配置也在app.php中//config/app.php//时区默认'UTC'改为'PRC' 中国时区'timezone' =&gt; 'PRC',//这是语言，如果有其他语言包，本地化需要.//语言包位于 resources/lang/ 下，默认en'locale' =&gt; 'en', 配置完成,怎么使用呢？ Migrationlaravel下使用migration来创建数据库迁移文件… 123php artisan make:migration create_protables_table//如果需要指定表名，可以使用 --create 和 --table.php artisan make:migration create_protables_table --create=protables 还有我们前面讲模型的时候，-m参数顺便创建的迁移文件.这也算一种迁移文件的创建.1php make:model Protable -m 创建的迁移文件都位于database/migrations 下. 迁移文件里面有up() down()两个方法,up是正向操作,’down’则是反向操作. 我们来添加一些简单的字段. 1234567891011121314151617181920212223242526272829303132333435363738//database/migrations/2018_02_23_112021_create_protables_table.php&lt;?phpuse Illuminate\\Support\\Facades\\Schema;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateProtablesTable extends Migration&#123; public function up() &#123; Schema::create('protables', function (Blueprint $table) &#123; //创建一个protables表 $table-&gt;increments('id'); //默认的自增id字段 $table-&gt;string('username'); //string() 相当于varchar $table-&gt;string('phone',100)-&gt;unique(); //带长度的varchar,unique()不重复 $table-&gt;string('password')-&gt;commit('密码'); //commit()是注释 $table-&gt;integer('user_id')-&gt;default(0); //integer() INTEGER //default() 是默认值 $table-&gt;text('content')-&gt;commit('内容'); $table-&gt;timestamps(); //timestamps() 会生成以下两个字段 //`created_at` 创建时间 //`updated_at` 更新时间 &#125;); &#125; public function down() &#123; //dropIfExists()逆向操作，如果存在此表就删除 //最好是加上这句. Schema::dropIfExists('protables'); &#125;&#125; 123456789101112131415//常用的字段修饰string() 相当于varchar 第一个参数是字段名，第二个参数可带长度(可选)integer()text() boolean() booleandecimal() double() float() 浮点数increments() 递增主键(unsigned)---//字段修饰符-&gt;commit() 注释-&gt;default() 默认值-&gt;unsigned() UNSIGEND-&gt;unique() UNIQUE-&gt;nullable() 可以为null-&gt;charset(&apos;utf8&apos;) 指定编码 迁移文件ok了，然后该生成了. 1php artisan migrate 执行的时候就会执行迁移文件中的up()方法，来创建表. 我们查看下数据库，(图形化还没装),就先用控制台将就看着. 1234| migrations | //迁移的记录| password_resets | //默认的找回密码表| protables | //我们创建的表| users | //默认的用户表 看到一句成功创建完成. Migrate错误有时候也不可能顺风顺水，也会报一些错误. 12345[Illuminate\\Database\\QueryException]SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table users add unique users_email_unique(email))[PDOException]SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes laravel5.4后使用的默认编码是utf8mb4,编码区别和数据库版本不同，执行命令的时候，或许会报以上的错误,解决方法也比较简单. 123456789//app\\Providers\\AppServiceProvider.phpuse Illuminate\\Support\\Facades\\Schema; //use这个public function boot()&#123; //在boot方法中添加 Schema::defaultStringLength(191);&#125; 完成后，再次执行migrate命令，应该就ok了 迁移回滚如果麒麟臂过快，不小心就执行了migrate后，不想要了，想要撤回迁移,也有rollback帮我们解决. 1php artisan migrate:rollback 执行的时候就会执行迁移文件中的down(),来删除表. 这就方便的回滚了最近的一次migrate操作，一次操作可能会包含多个迁移文件.如果想限制回滚次数,7次、5次、3次，只需要加上 --step=次数 12php artisan migrate:rollback --step=7//回滚最近7次迁移操作 是不是很Easy，如果你绝望了，放弃了，需要重构了，没关系，一个命令解决你问题. 12php artisan migrate:reset//回滚所有迁移，归零 更新数据表按业务需求，假如后期需要添加逻辑，需要新的字段，也不可能一次次回滚来修改，我们就要来更新数据表了，创建一个新的迁移文件. 需求，添加一个email字段 1php artisan make:migration add_email_to_protables_table 创建了一个迁移文件,2018_02_23_124340_add_email_to_protables_table.php 12345678910public function up()&#123; Schema::table('protables', function (Blueprint $table) &#123; $table-&gt;string('email')-&gt;unique(); &#125;);&#125;public function down()&#123; Schema::dropIfExists('protables');&#125; 这里注意，创建表的时候，是Schema::create，修改表的时候,是Schema::table,第一个参数就是表名,down()里面我们也加上逆向操作需要的,Schema::dropIfExists就是判断并删除表. 执行迁移命令，查看数据表结构. ok啦！Laravel内容丰富、知识也很多， 文章写的可能很杂乱，或许也像抄读文档,见谅.End.","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://Mudew.com/tags/laravel/"},{"name":"Database","slug":"Database","permalink":"https://Mudew.com/tags/Database/"}]},{"title":"Homestead安装phpredis扩展","slug":"Homestead安装phpredis扩展","date":"2018-02-23T05:57:31.000Z","updated":"2019-06-11T10:08:06.000Z","comments":true,"path":"20180223/homestead-install-phpredis-extension/","link":"","permalink":"https://Mudew.com/20180223/homestead-install-phpredis-extension/","excerpt":"","text":"前言今天写个demo，用到了Redis,但是报错了Class ‘Redis’ not found ...,使用的是Homestead环境，php没有装redis扩展… phpredis在vagrant ssh中操作,要sudo权限，不然会报错. 1234567$ git clone https://github.com/phpredis/phpredis.git$ cd phpredis //phpize版本要和php版本一致,我这里使用7.2版本.$ /usr/bin/phpize7.2$ ./configure --with-php-config=/usr/bin/php-config7.2//这里边也需要根据情况指定php-config的版本，且和phpize的版本保持一致.$ make &amp;&amp; make install 编译完成会有显示一个扩展所在目录，如果没有的话，就执行. 123$ php -i|grep extension_dir//返回extension_dir =&gt; /usr/lib/php/201***** =&gt; /usr/lib/php/201***** redis.so在modules目录中,把扩展移动到扩展所在目录. 1sudo mv ./modules/redis.so /usr/lib/php/201***** 这些步骤都在phpredis目录操作. 以上完成后,把扩展配置添加到php的配置文件.1234sudo touch /etc/php/7.2/fpm/conf.d/20-redis.ini//vim编辑20-redis.ini//写入 extension=redis.so //:wq 保存 重启php-fpm. 1sudo systemctl restart php7.2-fpm.service ok!一切完成，操作正常完成的话，phpinfo()应该就能看到了. End.","categories":[],"tags":[{"name":"Homestead","slug":"Homestead","permalink":"https://Mudew.com/tags/Homestead/"},{"name":"redis","slug":"redis","permalink":"https://Mudew.com/tags/redis/"},{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"}]},{"title":"Laravel5.6入门(五)","slug":"Laravel5-6入门-五","date":"2018-02-22T13:58:07.000Z","updated":"2020-07-22T10:39:17.137Z","comments":true,"path":"20180222/introduction-to-laravel56-5/","link":"","permalink":"https://Mudew.com/20180222/introduction-to-laravel56-5/","excerpt":"前言laravel5.6学习记录，学习最新的版本","text":"前言laravel5.6学习记录，学习最新的版本 Laravel文档Laravel 开发工具Phpstorm 开发环境Homestead 中文文档Laravel-China ComposerComposer Laravel5.6 路由的拓展我们写网站后台，一般都是admin什么的文件夹，来表示后台文件,访问的时候需要加上https://localhost/admin/xxx，路由很方便的解决了这个问题. 123456789//web.phpRoute::prefix('admin')-&gt;group(function ()&#123; Route::get('noone','TrController@noOne'); //get请求 Route::any('notwo','TrController@noTwo')-&gt;name('notwo'); //所有请求，命名路由 Route::match(['get','post'],'nothree/&#123;uid&#125;','TrController@noThree')-&gt;where('uid', '[0-9]+'); //get或者post请求，一个参数，以及正则匹配是否是数字&#125;); 统一的加上了admin前缀，prefix(&#39;前缀&#39;) group()是一个路由组，把一些路由放在一起，添加中间件等等 这里我们在深入一些. 1234//index.blade.php视图名 index.blade.php返回内容&#123;&#123;$uid&#125;&#125;---&#123;&#123;$name&#125;&#125; 视图123456789//web.phpRoute::prefix('admin')-&gt;namespace('Admin')-&gt;group(function () &#123; Route::match(['get', 'post'], 'nothree/&#123;uid&#125;/&#123;name&#125;', 'AucController@noThree') -&gt;where([ 'uid' =&gt; '[0-9]+', 'name' =&gt; '[a-z]+' ]); //get或者post请求，一个参数，以及正则匹配是否是数字&#125;); 路由，prefix设置前缀，namespace是命名空间，如果一个项目有很多控制器，把它们全部放到app\\Http\\Controllers,是不太好，还有一些需求，有相同的控制器名称，可以多分一些子目录，Admin、Home、Article…这个时候namespace就派上用场了 12//artisan创建也是能加目录的php artisan make:controller Admin/AucController 我们可以新建控制器到Admin目录. 123456//AucController.php public function noThree($uid,$name) &#123; //返回一个视图,并传值到视图 return view('studys.index')-&gt;with(compact('uid','name')); &#125; 注意这里的参数接收是按顺序来的，如果换成noThree($name,$uid),那么两个值就uid接的是name、name接的是uid. 我们访问http://laravel.study/admin/nothree/6666/Useri. 还有一点，路由参数的约束，如果每个路由都要约束同样的参数，代码就冗余了，Laravel也帮我们想到了. 1234567//app\\Providers\\RouteServiceProvider.phppublic function boot()&#123; Route::pattern('id', '[0-9]+'); parent::boot();&#125; 在RouteServiceProvider中boot方法添加.这属于全局约束，参数为id的都能被[0-9]+&#39;约束到. End","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://Mudew.com/tags/laravel/"},{"name":"入门","slug":"入门","permalink":"https://Mudew.com/tags/入门/"},{"name":"Route","slug":"Route","permalink":"https://Mudew.com/tags/Route/"}]},{"title":"Laravel5.6入门(四)","slug":"Laravel5-6入门-四","date":"2018-02-22T12:06:35.000Z","updated":"2020-07-22T10:39:17.141Z","comments":true,"path":"20180222/introduction-to-laravel56-4/","link":"","permalink":"https://Mudew.com/20180222/introduction-to-laravel56-4/","excerpt":"前言laravel5.6学习记录，学习最新的版本","text":"前言laravel5.6学习记录，学习最新的版本 Laravel文档Laravel 开发工具Phpstorm 开发环境Homestead 中文文档Laravel-China ComposerComposer Laravel5.6 控制器和路由控制器和路由我们都讲了一些，这篇我们结合在一起讲讲.新创建了个普通控制器，TrController来测试.我们先在控制器里创建几个方法，来和路由交互. 123456789101112131415161718192021222324252627//app\\Http\\Controllers\\TrController.php&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class TrController extends Controller&#123; public function noOne() &#123; //普通的返回 return '这是第一个函数'; &#125; public function noTwo() &#123; return '这是第二个函数'; &#125; public function noThree($uid) &#123; //返回一个视图,并传值到视图 return view('studys.index')-&gt;with(compact('uid')); &#125;&#125; 转到路由,我们把前几篇文章的知识点稍微结合一下. 1234567//web.phpRoute::get('/noone','TrController@noOne');//get请求Route::any('/notwo','TrController@noTwo')-&gt;name('notwo');//所有请求，命名路由Route::match(['get','post'],'/nothree/&#123;uid&#125;','TrController@noThree')-&gt;where('uid', '[0-9]+');//get或者post请求，一个参数，以及正则匹配是否是数字 修改下studys.index视图的内容，接收参数.12视图名 index.blade.php返回内容&#123;&#123;$uid&#125;&#125; 我们分别访问测试. noThree($uid)方法接收传来的值，传给视图，Compact,视图方面接收显示. End.","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://Mudew.com/tags/laravel/"},{"name":"入门","slug":"入门","permalink":"https://Mudew.com/tags/入门/"},{"name":"Controller","slug":"Controller","permalink":"https://Mudew.com/tags/Controller/"},{"name":"Model","slug":"Model","permalink":"https://Mudew.com/tags/Model/"}]},{"title":"Laravel5.6入门(三)","slug":"Laravel5-6入门-三","date":"2018-02-22T10:19:07.000Z","updated":"2020-07-22T10:39:17.132Z","comments":true,"path":"20180222/introduction-to-laravel56-3/","link":"","permalink":"https://Mudew.com/20180222/introduction-to-laravel56-3/","excerpt":"前言laravel5.6学习记录，学习最新的版本.","text":"前言laravel5.6学习记录，学习最新的版本. Laravel文档Laravel 开发工具Phpstorm 开发环境Homestead 中文文档Laravel-China ComposerComposer Laravel5.6 ControllerContrller用来分担路由的工作，路由作为转发，大家啊各行其是… 控制器创建12// * 替换你的控制名称,后缀 Controllerphp artisan make:controller * 这样就表示控制器创建成功,命令会去创建app\\Http\\Controllers\\TestController.php文件，以及写入命名空间和默认继承基类等，都是自动化完成. 12345678910&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class TestController extends Controller&#123; //&#125; 如果要更懒一点，命令加上 --resource 会自动创建一个资源控制器，资源控制器包括了增删改查等方法，可以满足大部分需求. 12// * 替换你的控制名称,后缀 Controllerphp artisan make:controller * --resource 资源控制器创建完成，这和创建普通控制器没有多大区别，只是多了一些常用方法. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485//app\\Http\\Controllers\\TestzyController.php&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class TestzyController extends Controller&#123; /** * Display a listing of the resource. * * @return \\Illuminate\\Http\\Response */ public function index() &#123; // &#125; /** * Show the form for creating a new resource. * * @return \\Illuminate\\Http\\Response */ public function create() &#123; // &#125; /** * Store a newly created resource in storage. * * @param \\Illuminate\\Http\\Request $request * @return \\Illuminate\\Http\\Response */ public function store(Request $request) &#123; // &#125; /** * Display the specified resource. * * @param int $id * @return \\Illuminate\\Http\\Response */ public function show($id) &#123; // &#125; /** * Show the form for editing the specified resource. * * @param int $id * @return \\Illuminate\\Http\\Response */ public function edit($id) &#123; // &#125; /** * Update the specified resource in storage. * * @param \\Illuminate\\Http\\Request $request * @param int $id * @return \\Illuminate\\Http\\Response */ public function update(Request $request, $id) &#123; // &#125; /** * Remove the specified resource from storage. * * @param int $id * @return \\Illuminate\\Http\\Response */ public function destroy($id) &#123; // &#125;&#125; 我们可以TestzyController把添加到路由中. 12//web.phpRoute::Resource('testzy', 'TestzyController'); 再查看一下系统的路由信息. 可以看到各个方法对应的URL,请求方式，路由名称等信息,都是一一对应的， 这是按照RESTful Api 设计生成的格式，get是从服务器取资源、post是新建资源、put是更新完整资源、patch更新部分资源、delete是删除资源. 资源控制器的路由命名添加了资源控制器到路由着中，命名方式不再是-&gt;name(&#39;&#39;)的方式. 1234567Route::Resource('testzy', 'TestzyController', ['names' =&gt; [ 'index' =&gt; 'indexahhh', 'create' =&gt; 'createahhh' ]]);//是第三个参数,传一个二维数组 此时路由信息，我们修改成功 控制器讲到这里，下面也说下创建模型. ModelModel是来和数据库打交道的 创建模型123// 创建一个新的 Eloquent 模型类// 我习惯把模型放到Models里php artisan make:model Models/Test 创建成功. 1234567891011//app\\Models\\Test.php&lt;?phpnamespace App\\Models;use Illuminate\\Database\\Eloquent\\Model;class Test extends Model&#123; //&#125; 同样的，命令把文件和命名空间、继承等都弄好了. 模型对应的数据库迁移文件可以自己创建，当然也可以在创建模型的时候一起创建，只需要加上 -m就ok. 如果加上-rmc,会自动创建Model、资源控制器、迁移文件，懒人必备 123// 创建一个新的 Eloquent 模型类// 我习惯把模型放到Models里php artisan make:model Models/Testzy -m 会生成几个文件. 123//一个Model，一个迁移文件app\\Models\\Testzy.phpdatabase\\migrations\\2018_02_22_113638_create_testzies_table.php End.","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://Mudew.com/tags/laravel/"},{"name":"入门","slug":"入门","permalink":"https://Mudew.com/tags/入门/"},{"name":"Artisan","slug":"Artisan","permalink":"https://Mudew.com/tags/Artisan/"}]},{"title":"Laravel5.6入门(二)","slug":"Laravel5-6入门-二","date":"2018-02-22T08:11:51.000Z","updated":"2020-07-22T10:39:17.140Z","comments":true,"path":"20180222/introduction-to-laravel56-2/","link":"","permalink":"https://Mudew.com/20180222/introduction-to-laravel56-2/","excerpt":"前言laravel5.6学习记录，学习最新的版本.","text":"前言laravel5.6学习记录，学习最新的版本. Laravel文档Laravel 开发工具Phpstorm 开发环境Homestead 中文文档Laravel-China ComposerComposer Laravel5.6 路由Route就是根据Url分配不同的处理程序. 我们可以使用1php artisan route:list 查看程序默认的路由信息. 首页/路由的处理是一个Closure闭包函数. 1234//route/web.phpRoute::get('/', function () &#123; return view('welcome');&#125;); get()是请求方式,/代表首页,welcome是视图文件,view(&#39;视图目录.视图文件名&#39;) 目录以.连接,视图文件名不需要.blade.php后缀函数可以直接定位到视图目录 Resources/views/*中. 请求方式有: 123456Route::get($uri, $callback); //取Route::post($uri, $callback); //新建Route::put($uri, $callback); //更新完整Route::patch($uri, $callback); //更新部分Route::delete($uri, $callback); //删除Route::options($uri, $callback); 我们可以新建一个路由和视图测试. get请求/study,返回views/study/index.blade.php视图 访问http://laravel.study/study 我们可以再次查看一下路由信息 这样就完成了一个非常简单的路由，把视图和路由关联在一起了 路由和控制器绑定因为还没讲到控制器，所以就代码示例，把闭包函数部分替换成控制器@方法即可 12Route::get('user/profile', 'UserController@index');//UserController 控制器名 @ index 函数 常用请求方式12345678910111213141516Route::get('foo', function () &#123; // 基本方式 //TODO&#125;);Route::post('foo', function () &#123; // 基本方式 //TODO&#125;);Route::match(['get', 'post'], '/', function () &#123; // 基本方式，匹配get和post //TODO&#125;);Route::any('foo', function () &#123; // 基本方式，所有请求方式 //TODO&#125;); 路由参数 必填参数 可选参数1234Route::get('user/&#123;name?&#125;', function ($name = 'John') &#123; return $name;&#125;);//可选参数使用?号标记，但是一定要有个默认值 路由正则正则匹配可以使用链式操作-&gt;where(&#39;参数名&#39;,&#39;正则&#39;) 123Route::get('user/&#123;name&#125;', function ($name) &#123; //&#125;)-&gt;where('name', '[A-Za-z]+'); 路由命名路由命名也可以使用链式操作-&gt;name(&#39;别名&#39;),或者使用Route::name(&#39;别名&#39;) 123456789Route::get('user/profile', function () &#123; //&#125;)-&gt;name('profile');Route::get('user/profile', 'UserController@showProfile')-&gt;name('profile');//第二种Route::name('profile')-&gt;get('user/profile', function () &#123; //&#125;); 路由命名主要使用在 route(&#39;路由名&#39;)函数 1234// 生成 URL...$url = route('profile');// 生成重定向...return redirect()-&gt;route('profile'); 路由这块姿势很多，更复杂的用到的时候再说 End.","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://Mudew.com/tags/laravel/"},{"name":"入门","slug":"入门","permalink":"https://Mudew.com/tags/入门/"}]},{"title":"Laravel5.6入门(一)","slug":"Laravel5.6入门-一","date":"2018-02-22T06:47:22.000Z","updated":"2020-07-22T10:39:17.137Z","comments":true,"path":"20180222/introduction-to-laravel56-1/","link":"","permalink":"https://Mudew.com/20180222/introduction-to-laravel56-1/","excerpt":"前言laravel5.6学习记录，学习最新的版本","text":"前言laravel5.6学习记录，学习最新的版本 Laravel文档Laravel 开发工具Phpstorm 开发环境Homestead 中文文档Laravel-China ComposerComposer Laravel5.6 安装Laravel有很多种安装方式,官方文档介绍两种 第一种是直接使用 composer create-project 创建Laravel项目,也是我主要使用的方式 1composer create-project --prefer-dist laravel/laravel laravel-study (可选)如果要指定版本，laravel/laravel=版本号 第二种方式是使用 laravel 的安装器； 下载Laravel安装器 确保 $HOME/.composer/vendor/bin 目录（或你的操作系统的等效目录）已经放在你的环境变量 $PATH 中，以便系统可以找到 laravel 的可执行文件。 1composer global require \"laravel/installer\" 然后就能直接new新项目了 1laravel new laravel-study 这里使用的是homestead，安装 看到set successfully.，就完成了 可以设置一些权限12sudo chmod -R 777 storagesudo chmod -R 755 public 因为本地开发可以适当给高一点 目录结构 安装完成，导入phpstorm App 目录包含了应用的核心代码，大部分代码编写都在里面. Http/Controllers 控制器目录. Http/Middleware 中间件目录. Bootstrap 框架的自动载入和缓存等文件. Config 所有的配置文件. Database 关于数据库的迁移和填充文件. Public 程序入口以及一些静态文件. index.php 程序入口 Resources 视图、前端资源、语言包等 Views 模板视图目录 Routes 路由目录 web.php 常用 Vendor 通过Composer加载的依赖 .env 一些秘钥，账号配置 只简洁的说了几个常用的，如果需要详细了解，可以看目录结构 配置好Homestead，设置域名，重启加载配置 123456//hosts192.168.10.10 laravel.study//Homestead.yamlsites: - map: laravel.study to: /home/vagrant/code/laravel-study/public 就能访问 http://laravel.study/查看 End.","categories":[],"tags":[{"name":"php","slug":"php","permalink":"https://Mudew.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"https://Mudew.com/tags/laravel/"},{"name":"入门","slug":"入门","permalink":"https://Mudew.com/tags/入门/"}]},{"title":"phpstorm-setting remarks","slug":"phpstorm-setting-remarks","date":"2018-02-22T05:12:31.000Z","updated":"2019-06-11T10:08:07.000Z","comments":true,"path":"20180222/phpstormsetting-remarks/","link":"","permalink":"https://Mudew.com/20180222/phpstormsetting-remarks/","excerpt":"前言记录一些phpstorm的小设置，持续更新","text":"前言记录一些phpstorm的小设置，持续更新 设置开启时选择项目 关掉选项 END.","categories":[],"tags":[{"name":"PHPSTORM","slug":"PHPSTORM","permalink":"https://Mudew.com/tags/PHPSTORM/"}]},{"title":"phpstorm-替换内置terminal","slug":"phpstorm-替换内置terminal","date":"2018-02-21T14:44:07.000Z","updated":"2019-06-11T10:08:06.000Z","comments":true,"path":"20180221/phpstormreplace-the-builtin-terminal/","link":"","permalink":"https://Mudew.com/20180221/phpstormreplace-the-builtin-terminal/","excerpt":"前言环境是win+phpstorm，Phpstorm重新配置，顺便记一些修改的配置，以备日后参考。phpstorm默认控制台是cmd，不太好看，换成自己喜欢的Cmder or Git bash…","text":"前言环境是win+phpstorm，Phpstorm重新配置，顺便记一些修改的配置，以备日后参考。phpstorm默认控制台是cmd，不太好看，换成自己喜欢的Cmder or Git bash… 替换cmder cmder是windows下非常好用的控制台 添加CMDER_ROOT到系统变量 变量值是cmder根目录 设置phpstorm-&gt;Tools-&gt;terminal-&gt;Shell Path1234//正常\"cmd.exe\" /k \"%CMDER_ROOT%\\vendor\\init.bat\"//有空格的\"cmd.exe\" /k \"\"%CMDER_ROOT%\\vendor\\init.bat\"\" 外面套的多一层双引号是因为我的路径里面有空格,然后应用,Alt+F12呼出Terminal看看效果。 反正比cmd好看就对了 (可选)设置console字体样式 替换Git Bash 设置phpstorm-&gt;Tools-&gt;terminal-&gt;Shell Path 步骤其实是一样的，只是参数不一样，就不上效果图了 1\"Git的安装路径\\bin\\sh.exe\" -login -i END.","categories":[],"tags":[{"name":"PHPSTORM","slug":"PHPSTORM","permalink":"https://Mudew.com/tags/PHPSTORM/"}]}]}