[{"title":"Bilibili Android客户端播放API数据包解析","url":"/2019/06/11/Bilibili-Android%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%92%AD%E6%94%BE%E6%95%B0%E6%8D%AE%E5%8C%85%E8%A7%A3%E6%9E%90/","content":"前言博客也很久没水了，从日更周更到N月更，不知道写一些什么好…这次是Bilibili客户端播放API的一个加解密算法，也折腾了我一段时间，东西写好很久了，一直懒就没写…\nBiliBili如果研究的朋友，可能都抓过包看过数据包的情况\n如图所示，播放计数的API，以及请求头、请求体、返回值  \n\nAPI: https://api.bilibili.com/x/report/click/android2  \n\n请求头的数据还是比较正常，但是看到请求体部分，瞬间懵圈了是一片乱码字符串，看了整个播放过程的API，只有这个是加密乱码的如果不是某段时间出现的代码，我也不知道这个是什么算法。\n加解密必要秘钥等\n\n\nNAME\nVALUE\nTYPE\nDESCRIBE\n\n\n\nAES_KEY\nfd6b639dbcff0c2a1b03b389ec763c4b\nstring\nnull\n\n\nAES_IV\n77b07a672d57d64c\nstring\nnull\n\n\nSHA256_SALT\n9cafa6466a028bfb\nstring\nnull\n\n\n这只适用于安卓客户端，和ios客户端等是不通用的\n解密解密，主要是为了解出请求参数有些什么，就不贴太多代码在博客上了  \n解密过程主要就是一个AES解密，暂时用不到Sha256 salt  \n\n图中红框内黑色部分数据就是加密的请求体，下面我们来解密参数  \n\n黑色部分数据Copy as Base64(因为我的解密代码是基于Base64的)  \n拆分出来的一部分加解密代码放到了Github哔哩哔哩-App客户端播放参数加解密\n解密部分我就不多说了，秘钥等都贴出来了，能折腾的就慢慢折腾我就直接直接贴出解出来的参数，参数比较多  \n这是登陆后的播放参数\n\n\n\nNAME\nVALUE\nDESCRIBE\n\n\n\naccess_key\nf3ae492*****0c51\nnull\n\n\naid\n123456\nnull\n\n\nauto_play\n0\n可为0-2\n\n\ncid\n654321\nnull\n\n\ndid\nBT******4a\n和设备相关\n\n\nepid\n0\nnull\n\n\nftime\n1558340481\nnull\n\n\nlv\n4\nnull\n\n\nmid\n1234\nnull\n\n\npart\n1\n分P\n\n\nsid\n0\nnull\n\n\nstime\n1558416933\nnull\n\n\nsub_type\n0\nnull\n\n\ntype\n3\nnull\n\n\nsign\n22bb3******cdb01b9\nsha256加密\n\n\n这是不登陆的播放参数\n\n\n\nNAME\nVALUE\nDESCRIBE\n\n\n\naid\n123456\nnull\n\n\ncid\n654321\nnull\n\n\ndid\nBT****4a\n和设备相关\n\n\nftime\n1558416933\nnull\n\n\nlv\n0\nnull\n\n\nmid\nnull\n值为空\n\n\npart\n1\n分P\n\n\nstime\n1558416933\nnull\n\n\n\n设备、版本不同可能存在参数差异  \n\n加密大概的加密过程\n\nAES加密( 参数排序(para) + Sha256Hash+salt加密(sign) )  \n\n我就贴一下一部分代码，知道怎么用就好了  \ndata = &#123;    &#x27;aid&#x27;: &#x27;123456&#x27;,    &#x27;cid&#x27;: &#x27;654321&#x27;,    &#x27;did&#x27;: &#x27;string&#x27;,     &#x27;ftime&#x27;: &#x27;112233&#x27;,    &#x27;lv&#x27;: &#x27;0&#x27;,    &#x27;mid&#x27;: &#x27;&#x27;,    &#x27;part&#x27;: &#x27;1&#x27;,    &#x27;stime&#x27;: &#x27;112233&#x27;&#125;temp_data = urlencode(data)print(temp_data)# aid=123456&amp;cid=654********=&amp;part=1&amp;stime=112233payload = aes_enc(f&quot;&#123;temp_data&#125;&amp;sign=&#123;hashlib_sha256(temp_data)&#125;&quot;)print(payload)# b&#x27;\\xb2\\x8a%\\xef\\xc0\\x18******************0&#x27;\n\n代码环境Python3，参数随便写的，还是得按照你自己的解密参数来贴出来的代码只是一部分，基于github上的代码  \nSHA256 HASH SALTdef hashlib_sha256(data, salt=&#x27;9cafa6466a028bfb&#x27;):    data = bytes(data, encoding=&#x27;utf-8&#x27;)    salt = bytes(salt, encoding=&#x27;utf-8&#x27;)    hash = hashlib.sha256(data)    hash.update(salt)    return hash.hexdigest()\n\n\nAES ENC DECAES的就不贴了，有点长，可以自己去看\n总结文章写的比较乱不全，只会贴出加解密部分，剩下的东西自己分析了该文章代码只为学习，麻烦未经允许禁止转载哦最后再贴一遍仓库地址 哔哩哔哩-App客户端播放参数加解密\n靠别人写全部代码，不太可能，大家都是鸽子，咕咕咕！\nEND.\n","categories":["Bilibili"],"tags":["Bilibili","Watch","Android","AES","SHA256"]},{"title":"Bilibili Android的Sign算法","url":"/2018/03/21/Bilibili-Android%E7%9A%84Sign%E7%AE%97%E6%B3%95/","content":"前言Bilibili客户端API的Sign验证算法\nBiliBilisign的拼接\n\nmd5加密( 参数排序(para) + App内置(appsecret) )\n\n排序按key排序,\nkey1=value1&amp;key2=value2&amp;key3=value3 \nAppsecretApp内置的私钥,抓包可见\nappsecret=ea85624dfcf12d7cc7b2b3a94fac1f2c(栗子)\n最后加密前应该是 key1=value1&amp;key2=value2&amp;key3=value3ea85624dfcf12d7cc7b2b3a94fac1f2c\n附上一个php的栗子\n/** * $data array * $appSecret string * return string */function createSign($data,)&#123;\t$appSecret = &#x27;ea85624dfcf12d7cc7b2b3a94fac1f2c&#x27;;    ksort($data);    $url_build = http_build_query($data);    return md5(http_build_query($data) . $appSecret); &#125;\n\n\nEND.\n","categories":["Bilibili"],"tags":["Bilibili","Sign"]},{"title":"Bilibili Web端直播加密心跳请求解析","url":"/2020/07/22/Bilibili-Web%E7%AB%AF%E7%9B%B4%E6%92%AD%E5%8A%A0%E5%AF%86%E5%BF%83%E8%B7%B3%E8%AF%B7%E6%B1%82%E8%A7%A3%E6%9E%90/","content":"前言清一色的开篇，目的只为水一篇文章…这次是Bilibili Web端直播心跳API一个加解密算法去年写的东西，放着一直没怎么使用，一直懒就没写…以下所有数据都脱敏处理或者打码，不要作测试数据…  \nBilibili Live如果研究的朋友，可能都抓过包看过数据包的情况有两个关键请求，分别为reportEnterRoom和reportHeartBeat两个请求在不同状态下带入一个加密参数 s  \nreportEnterRoom\nhttps://live-trace.bilibili.com/xlive/data-interface/v1/x25Kn/EE请求在心跳流程中只请求一次，进入房间  \n\n\n# E 1id: [1,145,0,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ts: 1595348574562is_patch: 0heart_beat: []ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: &#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;timestamp&quot;:1595348575,&quot;heartbeat_interval&quot;:300,&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;,&quot;secret_rule&quot;:[2,5,1,4],&quot;patch_status&quot;:2&#125;&#125;\n\nis_patch &#x3D;&#x3D; 0 -&gt; heart_beat &#x3D;&#x3D; [] 一般直接使用这个\n\n# E 2is_patch: 1heart_beat: [&#123;&quot;s&quot;:&quot;jjh64tcxjjjd062s2sfxfkrcey63a0z1jc9hrkjyy4d9436fib9wj0pynwmncpeib9i4ckjxmnkw1e0h41mn86fir47yzcafrspzrp05i9rnf0dbje6ndcsk3f1bm4th&quot;,&quot;id&quot;:&quot;[6,235,1,123456]&quot;,&quot;device&quot;:&quot;[\\&quot;AUTO3915894629123456\\&quot;,\\&quot;7b9faf1a-cdd0-45a7-8355-e68972550341\\&quot;]&quot;,&quot;ets&quot;:1595248610,&quot;benchmark&quot;:&quot;seacasdgyijfhofiuxoannn&quot;,&quot;time&quot;:285,&quot;ts&quot;:1595248894609,&quot;ua&quot;:&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64&quot;&#125;]\n\nis_patch &#x3D;&#x3D; 1 -&gt; heart_beat &#x3D;&#x3D; [********] 短时间内重复进出直播间触发\n\nreportHeartBeat\nhttps://live-trace.bilibili.com/xlive/data-interface/v1/x25Kn/XX请求在心跳流程中按次循环，必须先E再循环请求X  \n\n\n# X 1s: d6fb6f7fdef8de9262e2b27ff6ef185a8d2ff72ce68f0a3648797e146bd655d6f5aab5e8f46826cde306267de149ae439a8ed6c3ce1e22220f2af498be1d144fid: [1,145,1,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595348575benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595348874823ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595348875,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125;# X 2s: 8323ed71eac733c50956f46fbe10023826270197ee4af09c6ef036c1a798005298036de230bfc8ecde2e4018ee232884a2a813d89d12d701ab16f5c23d685ec9id: [1,145,2,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595348875benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595349175008ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595349175,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125; # X 3s: 369b18326a99fff5b5556da14039f807f21030e390de6f204a53d0cab0cccba7f0d0bcc60347f8fc43d9905be775f0c0fcdab4dd9bd6c8a52465f4a19b35cf36id: [1,145,3,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595349175benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595349475071ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595349475,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125;# X 4s: b9486ab176a70d444c7e34aa2f35c09270365fd15f5fc023036a426165d38a6fa831cde17de8a37007c53fcb204cfc0155167647c42bca263007068a42774592id: [1,145,4,123456]device: [&quot;AUTO3915894629123456&quot;,&quot;799c882c-06de-4bfe-a358-98a76dccfa07&quot;]ets: 1595349475benchmark: seacasdgyijfhofiuxoannntime: 300ts: 1595349775262ua: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.64csrf_token: 08jbtyz494rzim62c7k29mk7tjc8s5ezcsrf: 08jbtyz494rzim62c7k29mk7tjc8s5ezvisit_id: k5fj7uhwfn4&#123;&quot;code&quot;:0,&quot;message&quot;:&quot;0&quot;,&quot;ttl&quot;:1,&quot;data&quot;:&#123;&quot;heartbeat_interval&quot;:300,&quot;timestamp&quot;:1595349775,&quot;secret_rule&quot;:[2,5,1,4],&quot;secret_key&quot;:&quot;seacasdgyijfhofiuxoannn&quot;&#125;&#125;\n\nParameter\n参数注意数据规律，除了参数s，以下几个参数比较重要  \n\n\n\n\nNAME\nDESCRIBE\nREMARKS\n\n\n\nts\n请求时间\nnull\n\n\nets\n可从E-&gt;X*n依次从回显中取值\nnull\n\n\nid\n大分区、小分区、轮次、长位直播间\nnull\n\n\nsecret_rule\n加密规则\nnull\n\n\nheartbeat_interval\n请求之间的休眠\nnull\n\n\nsecret_key\n加密规则\nnull\n\n\n\n设备、版本不同可能存在参数差异  \n\n逻辑这里只贴一下大概的流程，具体的细节可以看后面的代码加密前明文主要是一些直播参数，以及dom、’window’、document加密部分是一个wasm文件，带入参数以及secret_rule等加密加密后密文是一个128位的HASH值解密过程就是一场艰苦的和JS玩捉迷藏的游戏  \n\n进入直播间和循环心跳\n\n\n外层调用心跳以及计算SIGN\n\n\n初始化Wasm\n\n\n调用Wasm加密Spyder (加密不止一轮)\n\n\nSpyder本体 (cargo-web)\n\n\n深度可以看看wasm2wat demo\n\n\nDemo\n\n\n只是贴出大概步骤，跳转并只不是一个js文件里发生  \n\n实现\n仓库地址 哔哩哔哩 Web端直播加密心跳请求解析代码逻辑比较简单，详情施工中\n\n总结文章写的比较乱不全，会贴出加解密部分，剩下的东西自己分析了该文章代码只为学习，麻烦未经允许禁止转载哦  \n靠别人写全部代码，不太可能，大家都是鸽子，咕咕咕！  \nEND.  \n","categories":["Bilibili"],"tags":["Bilibili","Live","Heartbeat","Wasm","Js"]},{"title":"CentOS 7搭建开源签到项目教程","url":"/2018/10/09/CentOS-7%E6%90%AD%E5%BB%BA%E5%BC%80%E6%BA%90%E7%AD%BE%E5%88%B0%E9%A1%B9%E7%9B%AE%E6%95%99%E7%A8%8B/","content":"前言Centos7.5&#x2F;Python2.7\n准备工作\n一台正常工作的VPS\n准备一个域名用于解析(可选)\n\n开源项目签到 —— 一个自动签到框架 base on an HAR editor\n签到(项目)签到(模板)\n搭建部署Centos\n# 开发工具包yum groupinstall &quot;Development Tools&quot; -yyum install python-devel mysql-connector-python git -ypip install tornado==4.5.3 u-msgpack-python jinja2 chardet requests pbkdf2 pycrypto\nUbuntu or Debian\napt-get install python-dev autoconf g++ python-pbkdf2pip install tornado u-msgpack-python jinja2 chardet requests pbkdf2 pycrypto\n\n克隆项目\ngit clone https://github.com/binux/qiandao.gitcd qiandao\n\n运行项目# 后台运行yum install screen -yscreen -S qiandao# 运行python ./run.py\n成功的话访问http://ip:8923/\n登陆注册设置管理员\npython ./chrole.py your@email.address admin\n\n模板的话可以在主站下载，也可以自己做，都有教程的。\n反向代理基本使用用ip访问就好，如果有要求域名的话，就使用反向代理吧\nyum install nginx -ysystemctl start nginxvim /etc/nginx/nginx.conf\n\nconf配置\nserver &#123;     listen  80;     #替换域名     server_name  domain.com;     #charset koi8-r;     #access_log  logs/host.access.log  main;     location /              &#123;             proxy_set_header Host $host;             proxy_set_header X-Real-Ip $remote_addr;             proxy_set_header X-Forwarded-For $remote_addr;             proxy_pass http://localhost:8923;             &#125;        &#125;\n\nnginx -t然后重启服务\nsystemctl restart nginx\n开机自启\nsystemctl enable nginx\n\n这样就能通过域名访问了\n教程很乱，当文档看吧，针对有基础的，很多小细节都没多写。\nEnd…\n","categories":["Python"],"tags":["python","centos","开源"]},{"title":"Centos7编译安装Python3","url":"/2018/09/17/Centos7%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Python3/","content":"前言Centos7.5&#x2F;Python3.6.6，记录下安装过程，以便日后查看\n依赖yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make  -y# 看需求安装yum groupinstall &quot;Development Tools&quot;  -y\n\n下载Python下载官网Python3.6.6\n\n选择需要的版本下载XZ Compressed source tabball\n\n安装以Python3.6.6安装为例\n# 解包，解压缩xz -d Python-3.6.6.tar.xztar -xvf Python-3.6.6.tar# 进入目录cd Python-3.6.6# 编译./configure --prefix=/usr/local/python3.6.6 --enable-optimizations# --prefix=/usr/local/python3.6.6 预安装目录# --enable-optimizations 是优化选项(LTO，PGO 等)加上这个 flag 编译后，性能有 10% 左右的优化(看需求)# 安装make &amp;&amp; make install\n等待编译完成即可，如果没有什么其他的报错，应该就OK的。\n使用怎么喜欢怎么来\nln -s /usr/local/python3.6.6/bin/python3.6 /usr/local/bin/python3.6ln -s /usr/local/python3.6.6/bin/pip3.6 /usr/local/bin/pip3.6\n\n\n使用python3.6 xxx.py和pip3.6 install xxxx\n\nEND.\n","categories":["Python"],"tags":["Python"]},{"title":"Django2.2以上针对Sqlite3版本不匹配","url":"/2019/04/17/Django2-2%E4%BB%A5%E4%B8%8A%E9%92%88%E5%AF%B9Sqlite3%E7%89%88%E6%9C%AC%E4%B8%8D%E5%8C%B9%E9%85%8D/","content":"前言很久没有水博客了，在运行一个Django项目的时， 服务器版本大概Centos7.2，新机器花了点时候安装完需要的环境和依赖，本想一发入魂直接成功的，昨天在Ubuntu上成功运行，结果Centos就给我整个报错。\n.....raise ImproperlyConfigured(&#x27;SQLite 3.8.3 or later is required (found %s).&#x27; % Database.sqlite_version)django.core.exceptions.ImproperlyConfigured: SQLite 3.8.3 or later is required (found 3.7.17).\n\n就是Django查到的Sqlite的版本不对，找到的是3.7.17，但是对版本要求(version &lt;&#x3D; 3.8.3)，爬了一下资料，在Django版本说明中看到\n# SQLite的最低支持版本从3.7.15增加到3.8.3The minimum supported version of SQLite is increased from 3.7.15 to 3.8.3.\n\n这就得升级Sqlite3的版本了\n下载Sqlite 下载官网Sqlite 3.28.0\n\n选择需要的版本下载Source Code -&gt; sqlite-autoconf*\n\n安装以写博客时的最新版安装为例\n# 下载$ wget http://www.sqlite.org/2019/sqlite-autoconf-3280000.tar.gz# 解包$ tar -zxvf sqlite-autoconf-3280000.tar.gz# 进入目录$ cd sqlite-autoconf-3280000# 配置 $ ./configure # --prefix=/usr/local 预安装目录(可选)# 编译$ make &amp;&amp; sudo make install\n等待编译完成即可，如果没有什么其他的报错，应该就OK的。\n测试如果是Centos7，yum更新了最新的Sqlite，默认的版本应该是3.7.17，\n# 备份默认的sqlite$ sudo mv -v /usr/bin/sqlite3 /usr/bin/sqlite3.7.17&quot;/usr/bin/sqlite3&quot; -&gt; &quot;/usr/bin/sqlite3.7.17&quot;# 复制新版本的sqlite文件夹# 此时目录 sqlite-autoconf-3280000$ sudo cp -v sqlite3 /usr/bin &quot;sqlite3&quot; -&gt; &quot;/usr/bin/sqlite3&quot;# 查看一下文件是否成功$ ls /usr/bin |grep sqlitesqlite3sqlite3.7.17# 共享库$ export LD_LIBRARY_PATH=&quot;/usr/local/lib&quot;# 如果登出后失效的，可以写进~/.bashrc 或 ~/.bash_profile\n\n使用# 版本查看$ sqlite3 --version3.28.0 2019-04-16 19:49:53 884b4b7e502b4e991677b53971277adfaf0a04a284f8e483e2553d0f83156b50# Python调用Sqlite版本查看$ python3.6Python 3.6.8 (default, Apr 16 2019, 14:31:25) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import sqlite3&gt;&gt;&gt; sqlite3.sqlite_version&#x27;3.28.0&#x27;&gt;&gt;&gt; exit()# 运行Django$ python3.6 manage.pyType &#x27;manage.py help &lt;subcommand&gt;&#x27; for help on a specific subcommand.Available subcommands:[auth]    changepassword    createsuperuser[contenttypes]    remove_stale_contenttypes...\n正常了，没有版本不匹配的报错了。其实主要sqlite3是yum源的最新版本才3.7.17，别卸载它后再装(跳过坑)，yum依赖sqlite，所以只有编译安装或者其他方式安装后替换文件目录。\n\n另外要注意的是，sudo python3.6 &amp; python3.6的执行结果是不同的。\n\n\nsudo不一定能读到新版本的Sqlite，窝再去爬爬文章待补充。\n\n\n文章比较乱，机器差异什么的或许有不同，仅供参考。\n\n参考文章: Django2.2で開発サーバー起動時にSQLite3のエラーが出た場合の対応\nEND.\n","categories":["Python"],"tags":["Python","Sqlite","Django","Centos"]},{"title":"Docker随记","url":"/2018/04/28/Docker%E9%9A%8F%E8%AE%B0/","content":"前言记录一些Docker的使用\n文档\nDocker文档\n\n容器服务\n\n\n服务商\n\n\n\n阿里云\n\n\n灵雀云\n\n\nDaoCloud\n\n\nDockerHub\n\n\nadd…\n\n\n运行docker run -it -p local_port:container_port --name=&quot;example&quot; -v local_path:container_path image_id /bin/bash# -i, --interactive=false    打开STDIN，用于控制台交互    # -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false# -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录  # --name=&quot;nginx-lb&quot; \t\t 为容器指定一个名称# -d \t\t\t\t\t\t 后台启动# -p                         指定端口\n\n查看docker ps -a# 查看容器列表# -a，查看所有容器包括停止状态的容器 # -l，查看最新创建的容器 # -n=x，查看最后创建的x个容器 \n\n\nCONTAINER ID| IMAGE| COMMAND| CREATED| STATUS| PORTS| NAMES 容器ID|使用的镜像|运行时的命令|创建时间|运行状态|对外开放的端口|容器名称\n\ndocker imagesdocker image ls# 查看镜像列表\n\nREPOSITORY|TAG|IMAGE ID|CREATED|SIZE仓库名|标签(版本)|镜像ID|创建时间|大小\n\n启动docker start 容器名或容器ID # 容器进入运行状态，当容器完成任务后，会自己退出，进入停止状态\n\n终止docker stop 容器名或容器ID \n\n删除docker rm 容器名或容器ID# 删除容器,前提要容器没有运行\n\ndocker rm `docker ps -a -q`# 一次性删除所有容器\n\ndocker rmi 镜像名或者镜像ID# 删除镜像\n\n进入docker attach 容器名或# attach进入容器的活动会话进程\n\ndocker exec -it 容器ID /bin/bash# exec进入容器启动一个新的交互\n\n日志docker logs 容器名或容器ID# 查看容器里在干什么\n\ndocker top 容器名或容器ID# 查看容器里的进程\n\n加速器$ sudo mkdir -p /etc/docker$ sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://oyukeh0j.mirror.aliyuncs.com&quot;]&#125;EOF$ sudo /etc/init.d/docker restart\n\n\n结束End\n","categories":["Docker"],"tags":["Docker","笔记"]},{"title":"Git杂项命令合集","url":"/2022/01/26/Git%E6%9D%82%E9%A1%B9%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86/","content":"前言记录Git杂项命令合集\n删除远程分支$ git push origin --delete [branchname]\n\n删除本地已合并的分支$ git branch -d [branchname]$ git branch -D [branchName]\n\n删除所有本地TAG$ git tag -l | xargs git tag -d\n\n删除远程本地TAG\n注意Windows平台可能需要用git-bash执行\n\n$ git show-ref --tag | awk &#x27;&#123;print &quot;:&quot; $2&#125;&#x27; | xargs git push origin\n\n新建空白分支$ git checkout --orphan newbranch$ git rm -rf .$ git commit --allow-empty -m &quot;[empty|rm] initial commit&quot;\n\n强制拉取并覆盖本地代码$ git fetch --all$ git reset --hard origin/master$ git pull\n\n加速克隆及下载镜像# https://doc.fastgit.org/# https://gitclone.com/# https://github.com.cnpmjs.org/# https://ghproxy.com/# 免替换$ git config --global url.&quot;https://hub.fastgit.org&quot;.insteadOf https://github.com\n\n设置代理# 全局项目$ git config --global http.proxy 127.0.0.1:1080$ git config --global https.proxy 127.0.0.1:1080# 单独项目$ git config --local http.proxy 127.0.0.1:1080$ git config --local https.proxy 127.0.0.1:1080# 清除$ git config --global --unset http.proxy$ git config --global --unset https.proxy# 针对 github.com 的单独配置$ git config --global http.https://github.com.proxy socks5://127.0.0.1:1080$ git config --global https.https://github.com.proxy socks5://127.0.0.1:1080$ git config --global --unset http.https://github.com.proxy$ git config --global --unset https.https://github.com.proxy\n\n查看配置# 查看所有配置$ git config -l# 查看用户配置$ git config --global -l # 查看系统配置$ git config --system -l # 查看仓库配置$ git config --local -l \n\n存储用户名和密码# 缓存时间 默认15分钟  --timeout 自定义时间$ git config --global credential.helper cache$ git config --global credential.helper &#x27;cache --timeout 3600&#x27;# 永久存储$ git config --global credential.helper store\n\n提交Commit关联Issue# 操作 fixes fixed fix closes close closed$ git commit -m &quot;... &#123;action&#125; #&#123;issue_id&#125;&quot;$ git commit -m &quot;... fixed #1024&quot;\n\n清空commit记录$ git rebase --root -i\n\n修改最近一次commit注释# vim  i -&gt; 修改 -&gt; esc -&gt; :wq$ git commit --amend\n\n提交大型文件(lfs)\nGit LFS 是 Github 开发的一个 Git 的扩展，用于实现 Git 对大文件的支持\n\n安装LFSLinux$ curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash$ sudo apt-get install git-lfs$ git lfs install\n\nMac(HomeBrew)$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;$ brew install git-lfs$ git lfs install\n\nWindowsWindows Installer\n# 下载安装上述链接的文件后执行命令$ git lfs install\n\n使用\n使用前需要git lfs install开启功能\n\n# 大文件追踪$ git lfs track &quot;your_large_file&quot;# 会生成大文件夹追踪记录，并添加提交$ git add .gitattributes$ git add your_large_file$ git commit -m &quot;Add large file&quot;$ git push origin master# 追踪记录$ git lfs ls-files# 可选clone方式$ git lfs clone\n\nEND.\n","categories":["git"],"tags":["git"]},{"title":"Homestead安装phpredis扩展","url":"/2018/02/23/Homestead%E5%AE%89%E8%A3%85phpredis%E6%89%A9%E5%B1%95/","content":"前言今天写个demo，用到了Redis,但是报错了 Class ‘Redis’ not found ...,使用的是Homestead环境，php没有装redis扩展…\nphpredis在vagrant ssh中操作,要sudo权限，不然会报错.\n$ git clone https://github.com/phpredis/phpredis.git$ cd phpredis              //phpize版本要和php版本一致,我这里使用7.2版本.$ /usr/bin/phpize7.2$ ./configure --with-php-config=/usr/bin/php-config7.2//这里边也需要根据情况指定php-config的版本，且和phpize的版本保持一致.$ make &amp;&amp; make install\n\n编译完成会有显示一个扩展所在目录，如果没有的话，就执行.\n$ php -i|grep extension_dir//返回extension_dir =&gt; /usr/lib/php/201***** =&gt; /usr/lib/php/201*****\n\nredis.so在modules目录中,把扩展移动到扩展所在目录.\nsudo mv ./modules/redis.so /usr/lib/php/201*****\n\n这些步骤都在phpredis目录操作.\n\n以上完成后,把扩展配置添加到php的配置文件.\nsudo touch /etc/php/7.2/fpm/conf.d/20-redis.ini//vim编辑20-redis.ini//写入 extension=redis.so //:wq 保存\n\n重启php-fpm.\nsudo systemctl restart php7.2-fpm.service\n\nok!一切完成，操作正常完成的话，phpinfo()应该就能看到了.\nEnd.\n","categories":["php"],"tags":["Homestead","redis","php"]},{"title":"Laravel5.6入门(三)","url":"/2018/02/22/Laravel5-6%E5%85%A5%E9%97%A8-%E4%B8%89/","content":"前言laravel5.6学习记录，学习最新的版本.\n\n\nLaravel文档Laravel\n开发工具Phpstorm\n开发环境Homestead\n中文文档Laravel-China\nComposerComposer\n\nLaravel5.6\n\nControllerContrller用来分担路由的工作，路由作为转发，大家啊各行其是…\n控制器创建// * 替换你的控制名称,后缀 Controllerphp artisan make:controller *\n\n\n这样就表示控制器创建成功,命令会去创建app\\Http\\Controllers\\TestController.php文件，以及写入命名空间和默认继承基类等，都是自动化完成.\n&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class TestController extends Controller&#123;    //&#125;\n\n如果要更懒一点，命令加上 --resource 会自动创建一个资源控制器，资源控制器包括了增删改查等方法，可以满足大部分需求.\n// * 替换你的控制名称,后缀 Controllerphp artisan make:controller * --resource\n\n\n资源控制器创建完成，这和创建普通控制器没有多大区别，只是多了一些常用方法.\n//app\\Http\\Controllers\\TestzyController.php&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class TestzyController extends Controller&#123;    /**     * Display a listing of the resource.     *     * @return \\Illuminate\\Http\\Response     */    public function index()    &#123;        //    &#125;    /**     * Show the form for creating a new resource.     *     * @return \\Illuminate\\Http\\Response     */    public function create()    &#123;        //    &#125;    /**     * Store a newly created resource in storage.     *     * @param  \\Illuminate\\Http\\Request  $request     * @return \\Illuminate\\Http\\Response     */    public function store(Request $request)    &#123;        //    &#125;    /**     * Display the specified resource.     *     * @param  int  $id     * @return \\Illuminate\\Http\\Response     */    public function show($id)    &#123;        //    &#125;    /**     * Show the form for editing the specified resource.     *     * @param  int  $id     * @return \\Illuminate\\Http\\Response     */    public function edit($id)    &#123;        //    &#125;    /**     * Update the specified resource in storage.     *     * @param  \\Illuminate\\Http\\Request  $request     * @param  int  $id     * @return \\Illuminate\\Http\\Response     */    public function update(Request $request, $id)    &#123;        //    &#125;    /**     * Remove the specified resource from storage.     *     * @param  int  $id     * @return \\Illuminate\\Http\\Response     */    public function destroy($id)    &#123;        //    &#125;&#125;\n\n我们可以TestzyController把添加到路由中.\n//web.phpRoute::Resource(&#x27;testzy&#x27;, &#x27;TestzyController&#x27;);\n\n再查看一下系统的路由信息.\n\n可以看到各个方法对应的URL,请求方式，路由名称等信息,都是一一对应的，\n这是按照RESTful Api 设计生成的格式，get是从服务器取资源、post是新建资源、put是更新完整资源、patch更新部分资源、delete是删除资源.\n资源控制器的路由命名添加了资源控制器到路由着中，命名方式不再是-&gt;name(&#39;&#39;)的方式.\nRoute::Resource(&#x27;testzy&#x27;, &#x27;TestzyController&#x27;, [&#x27;names&#x27; =&gt;    [        &#x27;index&#x27; =&gt; &#x27;indexahhh&#x27;,        &#x27;create&#x27; =&gt;  &#x27;createahhh&#x27;    ]]);//是第三个参数,传一个二维数组\n\n此时路由信息，我们修改成功\n\n控制器讲到这里，下面也说下创建模型.\nModelModel是来和数据库打交道的\n创建模型// 创建一个新的 Eloquent 模型类// 我习惯把模型放到Models里php artisan make:model Models/Test\n\n创建成功.\n//app\\Models\\Test.php&lt;?phpnamespace App\\Models;use Illuminate\\Database\\Eloquent\\Model;class Test extends Model&#123;    //&#125;\n\n同样的，命令把文件和命名空间、继承等都弄好了.\n模型对应的数据库迁移文件可以自己创建，当然也可以在创建模型的时候一起创建，只需要加上 -m就ok.\n\n如果加上-rmc,会自动创建Model、资源控制器、迁移文件，懒人必备 \n\n// 创建一个新的 Eloquent 模型类// 我习惯把模型放到Models里php artisan make:model Models/Testzy -m\n\n会生成几个文件.\n//一个Model，一个迁移文件app\\Models\\Testzy.phpdatabase\\migrations\\2018_02_22_113638_create_testzies_table.php\n\n\nEnd.\n","categories":["php"],"tags":["php","laravel","入门","Artisan"]},{"title":"Laravel5.6入门(二)","url":"/2018/02/22/Laravel5-6%E5%85%A5%E9%97%A8-%E4%BA%8C/","content":"前言laravel5.6学习记录，学习最新的版本.\n\n\nLaravel文档Laravel\n开发工具Phpstorm\n开发环境Homestead\n中文文档Laravel-China\nComposerComposer\n\nLaravel5.6\n\n路由Route就是根据Url分配不同的处理程序.\n我们可以使用\nphp artisan route:list\n查看程序默认的路由信息.首页/路由的处理是一个Closure闭包函数.\n//route/web.phpRoute::get(&#x27;/&#x27;, function () &#123;    return view(&#x27;welcome&#x27;);&#125;);\n\n\nget()是请求方式,/代表首页,welcome是视图文件,view(&#39;视图目录.视图文件名&#39;) 目录以.连接,视图文件名不需要.blade.php后缀函数可以直接定位到视图目录 Resources/views/*中.\n\n请求方式有:\nRoute::get($uri, $callback); //取Route::post($uri, $callback); //新建Route::put($uri, $callback);  //更新完整Route::patch($uri, $callback); //更新部分Route::delete($uri, $callback); //删除Route::options($uri, $callback);\n\n我们可以新建一个路由和视图测试.\n\n\nget请求/study,返回views/study/index.blade.php视图\n\n访问http://laravel.study/study\n\n我们可以再次查看一下路由信息\n\n这样就完成了一个非常简单的路由，把视图和路由关联在一起了\n路由和控制器绑定因为还没讲到控制器，所以就代码示例，把闭包函数部分替换成控制器@方法即可\nRoute::get(&#x27;user/profile&#x27;, &#x27;UserController@index&#x27;);//UserController 控制器名 @ index 函数\n\n常用请求方式Route::get(&#x27;foo&#x27;, function () &#123;    // 基本方式    //TODO&#125;);Route::post(&#x27;foo&#x27;, function () &#123;    // 基本方式    //TODO&#125;);Route::match([&#x27;get&#x27;, &#x27;post&#x27;], &#x27;/&#x27;, function () &#123;    // 基本方式，匹配get和post    //TODO&#125;);Route::any(&#x27;foo&#x27;, function () &#123;    // 基本方式，所有请求方式    //TODO&#125;);\n路由参数\n必填参数\n可选参数\n\nRoute::get(&#x27;user/&#123;name?&#125;&#x27;, function ($name = &#x27;John&#x27;) &#123;    return $name;&#125;);//可选参数使用?号标记，但是一定要有个默认值\n\n路由正则正则匹配可以使用链式操作-&gt;where(&#39;参数名&#39;,&#39;正则&#39;)\nRoute::get(&#x27;user/&#123;name&#125;&#x27;, function ($name) &#123;    //&#125;)-&gt;where(&#x27;name&#x27;, &#x27;[A-Za-z]+&#x27;);\n\n路由命名路由命名也可以使用链式操作-&gt;name(&#39;别名&#39;),或者使用Route::name(&#39;别名&#39;)\n\nRoute::get(&#x27;user/profile&#x27;, function () &#123;    //&#125;)-&gt;name(&#x27;profile&#x27;);Route::get(&#x27;user/profile&#x27;, &#x27;UserController@showProfile&#x27;)-&gt;name(&#x27;profile&#x27;);//第二种Route::name(&#x27;profile&#x27;)-&gt;get(&#x27;user/profile&#x27;, function () &#123;    //&#125;);\n\n路由命名主要使用在 route(&#39;路由名&#39;)函数\n// 生成 URL...$url = route(&#x27;profile&#x27;);// 生成重定向...return redirect()-&gt;route(&#x27;profile&#x27;);\n\n路由这块姿势很多，更复杂的用到的时候再说\nEnd.\n","categories":["php"],"tags":["php","laravel","入门"]},{"title":"Laravel5.6入门(五)","url":"/2018/02/22/Laravel5-6%E5%85%A5%E9%97%A8-%E4%BA%94/","content":"前言laravel5.6学习记录，学习最新的版本\n\n\nLaravel文档Laravel\n开发工具Phpstorm\n开发环境Homestead\n中文文档Laravel-China\nComposerComposer\n\nLaravel5.6\n\n路由的拓展我们写网站后台，一般都是admin什么的文件夹，来表示后台文件,访问的时候需要加上https://localhost/admin/xxx，路由很方便的解决了这个问题.\n//web.phpRoute::prefix(&#x27;admin&#x27;)-&gt;group(function ()&#123;    Route::get(&#x27;noone&#x27;,&#x27;TrController@noOne&#x27;);    //get请求    Route::any(&#x27;notwo&#x27;,&#x27;TrController@noTwo&#x27;)-&gt;name(&#x27;notwo&#x27;);    //所有请求，命名路由    Route::match([&#x27;get&#x27;,&#x27;post&#x27;],&#x27;nothree/&#123;uid&#125;&#x27;,&#x27;TrController@noThree&#x27;)-&gt;where(&#x27;uid&#x27;, &#x27;[0-9]+&#x27;);    //get或者post请求，一个参数，以及正则匹配是否是数字&#125;);\n\n\n统一的加上了admin前缀，prefix(&#39;前缀&#39;)\n\n\n\ngroup()是一个路由组，把一些路由放在一起，添加中间件等等\n\n这里我们在深入一些.\n//index.blade.php视图名 index.blade.php返回内容&#123;&#123;$uid&#125;&#125;---&#123;&#123;$name&#125;&#125;\n视图\n//web.phpRoute::prefix(&#x27;admin&#x27;)-&gt;namespace(&#x27;Admin&#x27;)-&gt;group(function () &#123;        Route::match([&#x27;get&#x27;, &#x27;post&#x27;], &#x27;nothree/&#123;uid&#125;/&#123;name&#125;&#x27;, &#x27;AucController@noThree&#x27;)            -&gt;where([                &#x27;uid&#x27; =&gt; &#x27;[0-9]+&#x27;,                &#x27;name&#x27; =&gt; &#x27;[a-z]+&#x27;            ]);        //get或者post请求，一个参数，以及正则匹配是否是数字&#125;);\n\n路由，prefix设置前缀，namespace是命名空间，如果一个项目有很多控制器，把它们全部放到app\\Http\\Controllers,是不太好，还有一些需求，有相同的控制器名称，可以多分一些子目录，Admin、Home、Article…这个时候namespace就派上用场了\n//artisan创建也是能加目录的php artisan make:controller Admin/AucController\n\n我们可以新建控制器到Admin目录.\n//AucController.php public function noThree($uid,$name)    &#123;        //返回一个视图,并传值到视图        return view(&#x27;studys.index&#x27;)-&gt;with(compact(&#x27;uid&#x27;,&#x27;name&#x27;));    &#125;\n\n\n注意这里的参数接收是按顺序来的，如果换成noThree($name,$uid),那么两个值就uid接的是name、name接的是uid.\n\n我们访问http://laravel.study/admin/nothree/6666/Useri.\n\n\n还有一点，路由参数的约束，如果每个路由都要约束同样的参数，代码就冗余了，Laravel也帮我们想到了.\n//app\\Providers\\RouteServiceProvider.phppublic function boot()&#123;    Route::pattern(&#x27;id&#x27;, &#x27;[0-9]+&#x27;);    parent::boot();&#125;\n\n在RouteServiceProvider中boot方法添加.这属于全局约束，参数为id的都能被[0-9]+&#39;约束到.\nEnd\n","categories":["php"],"tags":["php","laravel","入门","Route"]},{"title":"Laravel5.6入门(六)","url":"/2018/02/23/Laravel5-6%E5%85%A5%E9%97%A8-%E5%85%AD/","content":"前言laravel5.6学习记录，学习最新的版本\n\n\nLaravel文档Laravel\n开发工具Phpstorm\n开发环境Homestead\n中文文档Laravel-China\nComposerComposer\n\nLaravel5.6\n\n数据库讲了控制器和路由，我们来讲一下数据库.\n配置要使用数据库，当然要先配置，才能连上数据库使用.数据库的配置主要有两个地方.\n\n.env文件，包涵较多的配置项，当然也包括数据库的信息，\nconfig/database.php 里面包括了数据库、数据库驱动、Redis等.\n\n//.envDB_CONNECTION=mysqlDB_HOST=127.0.0.1DB_PORT=3306DB_DATABASE=homesteadDB_USERNAME=homesteadDB_PASSWORD=secret\n\n//config/database.php&lt;?phpreturn [    &#x27;default&#x27; =&gt; env(&#x27;DB_CONNECTION&#x27;, &#x27;mysql&#x27;),    &#x27;connections&#x27; =&gt; [        &#x27;sqlite&#x27; =&gt; [            &#x27;driver&#x27; =&gt; &#x27;sqlite&#x27;,            &#x27;database&#x27; =&gt; env(&#x27;DB_DATABASE&#x27;, database_path(&#x27;database.sqlite&#x27;)),            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,        ],        &#x27;mysql&#x27; =&gt; [            &#x27;driver&#x27; =&gt; &#x27;mysql&#x27;,            &#x27;host&#x27; =&gt; env(&#x27;DB_HOST&#x27;, &#x27;127.0.0.1&#x27;),            &#x27;port&#x27; =&gt; env(&#x27;DB_PORT&#x27;, &#x27;3306&#x27;),            &#x27;database&#x27; =&gt; env(&#x27;DB_DATABASE&#x27;, &#x27;forge&#x27;),            &#x27;username&#x27; =&gt; env(&#x27;DB_USERNAME&#x27;, &#x27;forge&#x27;),            &#x27;password&#x27; =&gt; env(&#x27;DB_PASSWORD&#x27;, &#x27;&#x27;),            &#x27;unix_socket&#x27; =&gt; env(&#x27;DB_SOCKET&#x27;, &#x27;&#x27;),            &#x27;charset&#x27; =&gt; &#x27;utf8mb4&#x27;,            &#x27;collation&#x27; =&gt; &#x27;utf8mb4_unicode_ci&#x27;,            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,            &#x27;strict&#x27; =&gt; true,            &#x27;engine&#x27; =&gt; null,        ],        &#x27;pgsql&#x27; =&gt; [            &#x27;driver&#x27; =&gt; &#x27;pgsql&#x27;,            &#x27;host&#x27; =&gt; env(&#x27;DB_HOST&#x27;, &#x27;127.0.0.1&#x27;),            &#x27;port&#x27; =&gt; env(&#x27;DB_PORT&#x27;, &#x27;5432&#x27;),            &#x27;database&#x27; =&gt; env(&#x27;DB_DATABASE&#x27;, &#x27;forge&#x27;),            &#x27;username&#x27; =&gt; env(&#x27;DB_USERNAME&#x27;, &#x27;forge&#x27;),            &#x27;password&#x27; =&gt; env(&#x27;DB_PASSWORD&#x27;, &#x27;&#x27;),            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,            &#x27;schema&#x27; =&gt; &#x27;public&#x27;,            &#x27;sslmode&#x27; =&gt; &#x27;prefer&#x27;,        ],        &#x27;sqlsrv&#x27; =&gt; [            &#x27;driver&#x27; =&gt; &#x27;sqlsrv&#x27;,            &#x27;host&#x27; =&gt; env(&#x27;DB_HOST&#x27;, &#x27;localhost&#x27;),            &#x27;port&#x27; =&gt; env(&#x27;DB_PORT&#x27;, &#x27;1433&#x27;),            &#x27;database&#x27; =&gt; env(&#x27;DB_DATABASE&#x27;, &#x27;forge&#x27;),            &#x27;username&#x27; =&gt; env(&#x27;DB_USERNAME&#x27;, &#x27;forge&#x27;),            &#x27;password&#x27; =&gt; env(&#x27;DB_PASSWORD&#x27;, &#x27;&#x27;),            &#x27;charset&#x27; =&gt; &#x27;utf8&#x27;,            &#x27;prefix&#x27; =&gt; &#x27;&#x27;,        ],    ],    &#x27;migrations&#x27; =&gt; &#x27;migrations&#x27;,    &#x27;redis&#x27; =&gt; [        &#x27;client&#x27; =&gt; &#x27;predis&#x27;,        &#x27;default&#x27; =&gt; [            &#x27;host&#x27; =&gt; env(&#x27;REDIS_HOST&#x27;, &#x27;127.0.0.1&#x27;),            &#x27;password&#x27; =&gt; env(&#x27;REDIS_PASSWORD&#x27;, null),            &#x27;port&#x27; =&gt; env(&#x27;REDIS_PORT&#x27;, 6379),            &#x27;database&#x27; =&gt; 0,        ],    ],];\n\n配置项都很简单，数据库名、账号、密码、端口设置上就ok.配置文件的可读性很高.database中用的env()函数读取.env文件的配置项.\n&#x27;default&#x27; =&gt; env(&#x27;DB_CONNECTION&#x27;, &#x27;mysql&#x27;),//env(),传两个参数，第一个是`.env`里的配置项，第二个是默认值.//如果配置项没有值，就使用设置的默认值.\n\n看你的需求，如果不会更换的就可以写死，也就是写到默认值里，如果频繁更换，或者线下线上的配置区分，就写到.env里，上线只需要改一份配置就好了.\n\n.env 在.gitignore中，是属于git忽略文件，也能保证一些安全问题，这里不细说.\n\n修改配置的时候，我们也可以顺便修改下通用配置.\n//.envAPP_NAME=LaravelAPP_ENV=localAPP_KEY=base64:****************=APP_DEBUG=trueAPP_URL=http://localhost//名称、环境、是否开启debug(显示一些详细错误信息)、以及域名等.\n\n//我们主要改几个地方,其他的按照自己的需求//上面的配置也在app.php中//config/app.php//时区默认&#x27;UTC&#x27;改为&#x27;PRC&#x27; 中国时区&#x27;timezone&#x27; =&gt; &#x27;PRC&#x27;,//这是语言，如果有其他语言包，本地化需要.//语言包位于 resources/lang/ 下，默认en&#x27;locale&#x27; =&gt; &#x27;en&#x27;, \n\n配置完成,怎么使用呢？\nMigrationlaravel下使用migration来创建数据库迁移文件…\nphp artisan make:migration create_protables_table//如果需要指定表名，可以使用 --create 和 --table.php artisan make:migration create_protables_table --create=protables\n\n还有我们前面讲模型的时候，-m参数顺便创建的迁移文件.这也算一种迁移文件的创建.\nphp make:model Protable -m\n\n\n创建的迁移文件都位于database/migrations 下.\n\n迁移文件里面有up() down()两个方法,up是正向操作,’down’则是反向操作.\n我们来添加一些简单的字段.\n//database/migrations/2018_02_23_112021_create_protables_table.php&lt;?phpuse Illuminate\\Support\\Facades\\Schema;use Illuminate\\Database\\Schema\\Blueprint;use Illuminate\\Database\\Migrations\\Migration;class CreateProtablesTable extends Migration&#123;    public function up()    &#123;        Schema::create(&#x27;protables&#x27;, function (Blueprint $table) &#123;        \t//创建一个protables表            $table-&gt;increments(&#x27;id&#x27;);            //默认的自增id字段            $table-&gt;string(&#x27;username&#x27;);            //string() 相当于varchar            $table-&gt;string(&#x27;phone&#x27;,100)-&gt;unique();            //带长度的varchar,unique()不重复            $table-&gt;string(&#x27;password&#x27;)-&gt;commit(&#x27;密码&#x27;);            //commit()是注释            $table-&gt;integer(&#x27;user_id&#x27;)-&gt;default(0);            //integer() INTEGER            //default() 是默认值            $table-&gt;text(&#x27;content&#x27;)-&gt;commit(&#x27;内容&#x27;);            $table-&gt;timestamps();            //timestamps() 会生成以下两个字段            //`created_at` 创建时间            //`updated_at` 更新时间        &#125;);    &#125;    public function down()    &#123;    \t//dropIfExists()逆向操作，如果存在此表就删除    \t//最好是加上这句.        Schema::dropIfExists(&#x27;protables&#x27;);    &#125;&#125;\n\n//常用的字段修饰string() 相当于varchar 第一个参数是字段名，第二个参数可带长度(可选)integer()text() boolean() booleandecimal() double() float() 浮点数increments() 递增主键(unsigned)---//字段修饰符-&gt;commit() 注释-&gt;default() 默认值-&gt;unsigned() UNSIGEND-&gt;unique()  UNIQUE-&gt;nullable() 可以为null-&gt;charset(&#x27;utf8&#x27;) 指定编码\n\n迁移文件ok了，然后该生成了.\nphp artisan migrate\n\n执行的时候就会执行迁移文件中的up()方法，来创建表.\n\n我们查看下数据库，(图形化还没装),就先用控制台将就看着.\n\n| migrations       | //迁移的记录| password_resets  | //默认的找回密码表| protables        | //我们创建的表| users \t\t   | //默认的用户表\n\n看到一句成功创建完成.\nMigrate错误有时候也不可能顺风顺水，也会报一些错误.\n[Illuminate\\Database\\QueryException]SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes (SQL: alter table users add unique users_email_unique(email))[PDOException]SQLSTATE[42000]: Syntax error or access violation: 1071 Specified key was too long; max key length is 767 bytes\n\nlaravel5.4后使用的默认编码是utf8mb4 ,编码区别和数据库版本不同，执行命令的时候，或许会报以上的错误,解决方法也比较简单.\n//app\\Providers\\AppServiceProvider.phpuse Illuminate\\Support\\Facades\\Schema; //use这个public function boot()&#123;\t//在boot方法中添加    Schema::defaultStringLength(191);&#125;\n\n完成后，再次执行migrate命令，应该就ok了\n迁移回滚如果麒麟臂过快，不小心就执行了migrate后，不想要了，想要撤回迁移,也有rollback帮我们解决.\nphp artisan migrate:rollback\n\n执行的时候就会执行迁移文件中的down(),来删除表.\n\n这就方便的回滚了最近的一次migrate操作，一次操作可能会包含多个迁移文件.如果想限制回滚次数,7次、5次、3次，只需要加上 --step=次数\nphp artisan migrate:rollback --step=7//回滚最近7次迁移操作\n\n是不是很Easy，如果你绝望了，放弃了，需要重构了，没关系，一个命令解决你问题.\nphp artisan migrate:reset//回滚所有迁移，归零\n\n更新数据表按业务需求，假如后期需要添加逻辑，需要新的字段，也不可能一次次回滚来修改，我们就要来更新数据表了，创建一个新的迁移文件.\n\n需求，添加一个email字段\n\nphp artisan make:migration add_email_to_protables_table\n\n创建了一个迁移文件,2018_02_23_124340_add_email_to_protables_table.php\npublic function up()&#123;    Schema::table(&#x27;protables&#x27;, function (Blueprint $table) &#123;        $table-&gt;string(&#x27;email&#x27;)-&gt;unique();    &#125;);&#125;public function down()&#123;    Schema::dropIfExists(&#x27;protables&#x27;);&#125;\n\n这里注意，创建表的时候，是Schema::create，修改表的时候,是Schema::table,第一个参数就是表名,down()里面我们也加上逆向操作需要的,Schema::dropIfExists就是判断并删除表.\n执行迁移命令，查看数据表结构.\n\nok啦！Laravel内容丰富、知识也很多，文章写的可能很杂乱，或许也像抄读文档,见谅.End.\n","categories":["php"],"tags":["php","laravel","Database"]},{"title":"Laravel5.6入门(四)","url":"/2018/02/22/Laravel5-6%E5%85%A5%E9%97%A8-%E5%9B%9B/","content":"前言laravel5.6学习记录，学习最新的版本\n\n\nLaravel文档Laravel\n开发工具Phpstorm\n开发环境Homestead\n中文文档Laravel-China\nComposerComposer\n\nLaravel5.6\n\n控制器和路由控制器和路由我们都讲了一些，这篇我们结合在一起讲讲.新创建了个普通控制器，TrController来测试.我们先在控制器里创建几个方法，来和路由交互.\n//app\\Http\\Controllers\\TrController.php&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;class TrController extends Controller&#123;    public function noOne()    &#123;        //普通的返回        return &#x27;这是第一个函数&#x27;;    &#125;    public function noTwo()    &#123;        return &#x27;这是第二个函数&#x27;;    &#125;    public function noThree($uid)    &#123;        //返回一个视图,并传值到视图        return view(&#x27;studys.index&#x27;)-&gt;with(compact(&#x27;uid&#x27;));    &#125;&#125;\n\n转到路由,我们把前几篇文章的知识点稍微结合一下.\n//web.phpRoute::get(&#x27;/noone&#x27;,&#x27;TrController@noOne&#x27;);//get请求Route::any(&#x27;/notwo&#x27;,&#x27;TrController@noTwo&#x27;)-&gt;name(&#x27;notwo&#x27;);//所有请求，命名路由Route::match([&#x27;get&#x27;,&#x27;post&#x27;],&#x27;/nothree/&#123;uid&#125;&#x27;,&#x27;TrController@noThree&#x27;)-&gt;where(&#x27;uid&#x27;, &#x27;[0-9]+&#x27;);//get或者post请求，一个参数，以及正则匹配是否是数字\n\n修改下studys.index视图的内容，接收参数.\n视图名 index.blade.php返回内容&#123;&#123;$uid&#125;&#125;\n\n我们分别访问测试.\n\nnoThree($uid)方法接收传来的值，传给视图，Compact,视图方面接收显示&#123;&#123;变量名&#125;&#125;.\nEnd.\n","categories":["php"],"tags":["php","laravel","入门","Controller","Model"]},{"title":"Laravel5.6入门(一)","url":"/2018/02/22/Laravel5.6%E5%85%A5%E9%97%A8-%E4%B8%80/","content":"前言laravel5.6学习记录，学习最新的版本\n\n\nLaravel文档Laravel\n开发工具Phpstorm\n开发环境Homestead\n中文文档Laravel-China\nComposerComposer\n\nLaravel5.6\n\n安装Laravel有很多种安装方式,官方文档介绍两种\n\n第一种是直接使用 composer create-project 创建Laravel项目,也是我主要使用的方式\n\ncomposer create-project --prefer-dist laravel/laravel laravel-study\n\n(可选)如果要指定版本，laravel/laravel=版本号\n\n\n第二种方式是使用 laravel 的安装器；\n\n\n下载Laravel安装器\n\n确保 $HOME&#x2F;.composer&#x2F;vendor&#x2F;bin 目录（或你的操作系统的等效目录）已经放在你的环境变量 $PATH 中，以便系统可以找到 laravel 的可执行文件。\n\ncomposer global require &quot;laravel/installer&quot;\n\n然后就能直接new新项目了\nlaravel new laravel-study\n\n这里使用的是homestead，安装看到set successfully.，就完成了\n可以设置一些权限\nsudo chmod -R 777 storagesudo chmod -R 755 public\n\n因为本地开发可以适当给高一点\n\n目录结构\n\n安装完成，导入phpstorm\n\n\n\nApp 目录包含了应用的核心代码，大部分代码编写都在里面.\nHttp&#x2F;Controllers 控制器目录.\nHttp&#x2F;Middleware 中间件目录.\n\n\nBootstrap 框架的自动载入和缓存等文件.\nConfig 所有的配置文件.\nDatabase 关于数据库的迁移和填充文件.\nPublic 程序入口以及一些静态文件.\nindex.php 程序入口\n\n\nResources 视图、前端资源、语言包等\nViews 模板视图目录\n\n\nRoutes 路由目录\nweb.php 常用\n\n\nVendor 通过Composer加载的依赖\n.env 一些秘钥，账号配置\n\n\n只简洁的说了几个常用的，如果需要详细了解，可以看目录结构\n\n配置好Homestead，设置域名，重启加载配置\n//hosts192.168.10.10\tlaravel.study//Homestead.yamlsites:    - map: laravel.study      to: /home/vagrant/code/laravel-study/public\n\n就能访问 http://laravel.study/查看\n\nEnd.\n","categories":["php"],"tags":["php","laravel","入门"]},{"title":"Node&npm笔记","url":"/2018/03/21/Node-npm%E7%AC%94%E8%AE%B0/","content":"前言记一些Node&amp;Npm使用记录\nNode升级以下命令,Linux可能需要权限\n\nnpm install -g nn latest\n\n如果windows下面报错,windows版本可以尝试下载官方的msi软件包覆盖安装,也是可行的\nNpm升级\nnpm install -g npm\n\nNpm更新更新全局可更新的包\n\nnpm update -g \n\n更新package.json可更新的包\n\nnpm update\n\n检查npm包的状态\n\nnpm-check -u -g\n\n查看哪些包有更新\n\nnpm -g outdated \n\n全局安装\n\nnpm install -g\n\nNrm的使用安装\nnpm install -g nrm\n\n使用显示registry可用列表\n\nnrm ls\n\n$ nrm ls* npm ---- https://registry.npmjs.org/  cnpm --- http://r.cnpmjs.org/  eu ----- http://registry.npmjs.eu/  au ----- http://registry.npmjs.org.au/  sl ----- http://npm.strongloop.com/  nj ----- https://registry.nodejitsu.com/\n\n使用registry\n\nnrm use cnpm\n\n$ nrm use cnpm &gt;&gt;&gt; Registry has been set to: http://r.cnpmjs.org/\n\n测试registry的延迟\n\nnrm test\n\nEND.\n","categories":["nodejs"],"tags":["Node","Npm"]},{"title":"PhpStorm小记","url":"/2024/04/08/PhpStorm%E5%B0%8F%E8%AE%B0/","content":"前言记录一些phpstorm的小设置，持续更新\n设置开启时选择项目\n关掉选项\n\n\n替换默认的Terminal为Cmder\ncmder是windows下非常好用的控制台\n\n添加CMDER_ROOT到系统变量\n\n变量值是cmder根目录\n\n设置phpstorm-&gt;Tools-&gt;terminal-&gt;Shell Path//正常&quot;cmd.exe&quot; /k &quot;%CMDER_ROOT%\\vendor\\init.bat&quot;//有空格的&quot;cmd.exe&quot; /k &quot;&quot;%CMDER_ROOT%\\vendor\\init.bat&quot;&quot;\n\n\n\n外面套的多一层双引号是因为我的路径里面有空格,然后应用,Alt+F12呼出Terminal看看效果。\n\n\n\n反正比cmd好看就对了\n\n(可选)设置console字体样式\n替换默认的Terminal为GitBash设置phpstorm-&gt;Tools-&gt;terminal-&gt;Shell Path\n步骤其实是一样的，只是参数不一样，就不上效果图了\n\n&quot;Git的安装路径\\bin\\sh.exe&quot; -login -i\n\n\nEND.\n","categories":["php"],"tags":["php","PhpStorm"]},{"title":"Python3.6中遇到UnicodeEncodeError错误","url":"/2018/10/02/Python3-6%E4%B8%AD%E9%81%87%E5%88%B0UnicodeEncodeError%E9%94%99%E8%AF%AF/","content":"前言Centos7.3&#x2F;Python3.6.6|中文语言包的安装及中文支持\n报错新系统配置Python环境,运行项目出现编码错误。\nUnicodeEncodeError: &#x27;ascii&#x27; codec can&#x27;t encode characters in ordinal not in range(128)\n\n查错\n遇事不决问百度，万裁难断询谷歌\n\n一开始搜索发现大部分文章分析是代码编码问题,后来尝试无果。后来猜测可能是编译Python时系统环境编码有问题,经过一通操作，果然解决了，查询了一下，发现网络上果然有些朋友栽在这个坑里,就记录一下解决方案。\n解决安装语言# 包括了&quot;zh_CN&quot;yum groupinstall &quot;fonts&quot;\n查看一下是否安装成功\n# 如果有&quot;zh_CN&quot;什么的，应该就成功了locale -a |grep &quot;zh_CN&quot;\n\n修改语言vim /etc/locale.conf# LANG=&quot;zh_CN.UTF-8&quot;\n\n查看语言# 查看系统语言变量locale\n会出现好几个”zh_CN.UTF-8”就正常的\n# 查看语言包locale -a\n\n如果没有出现错误,就表示中文已经安装成功了,可以尝试一下在终端上操作一下安装删除等操作,看能不能正常输出中文,如果出现错误就单独安装一下。\n# 只针对Centos7 , 6版本是不一样的yum install kde-l10n-Chineseyum reinstall glibc-common\n\n如果一切没有的问题的话,就可以重新编译一下Python3环境。\nEND.\n","categories":["Python"],"tags":["Python"]},{"title":"Python3.6安装Twisted报错解决","url":"/2018/07/20/Python3-6%E5%AE%89%E8%A3%85Twisted%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/","content":"前言Centos7.4&#x2F;Python3.6.6\n报错安装Scrapy时需要Twisted依赖，使用pip3 install Twisted安装，但是报了一个错误。\nThis is the last Twisted release where...\n\n查错\n遇事不决问百度，万裁难断询谷歌\n\n经过一番搜索后，问题是Twisted模块和高版本Python有兼容性问题，可以选择在官网下载文件然后编译安装。\n解决Twisted官网\n去官网下载对应的版本，我这里选一个目前最新版本，是支持Python3.6的\n# 下载wget https://twistedmatrix.com/Releases/Twisted/18.7/Twisted-18.7.0.tar.bz2# ...# 解压tar -xvf Twisted-18.7.0.tar.bz2#...# 进入目录cd Twisted-18.7.0# ...# 编译安装python3 setup.py install# ...\n\n等待编译完成即可，如果没有什么其他的报错，应该就OK的。\nEND.\n","categories":["Python"],"tags":["Python"]},{"title":"Python常用下载函数","url":"/2018/07/20/Python%E5%B8%B8%E7%94%A8%E4%B8%8B%E8%BD%BD%E5%87%BD%E6%95%B0/","content":"前言常用比较万金油的下载函数，记录方便下次调用。\n代码import requestsdef downloadData(url, **kwargs):    try:        res = requests.get(url, **kwargs)        res.raise_for_status()        res.encoding = res.apparent_encoding        return res.text    except:        return None\n\n\n**kwargs 允许你将不定长度的键值对, 作为参数传递给一个函数。如果你想要在一个函数里处理带名字的参数, 你应该使用**kwargs。\n\nEND.\n","categories":["Python"],"tags":["Python"]},{"title":"TensorFlow v1到v2版本兼容指南","url":"/2021/09/15/TensorFlow%20v1%E5%88%B0v2%E7%89%88%E6%9C%AC%E5%85%BC%E5%AE%B9%E6%8C%87%E5%8D%97/","content":"前言记录TensorFlow 中v2版本使用v1代码的各种问题\n问题一Question:\nfrom keras.utils import multi_gpu_modelImportError: cannot import name &#x27;multi_gpu_model&#x27; from &#x27;keras.utils&#x27;...\n\nAnswer:\nfrom keras.utils import multi_gpu_modelto:from keras.utils.multi_gpu_utils import multi_gpu_model\n\n问题二Question:\nValueError: Subshape must have computed start &gt;= end since stride is negative, but is 0 and 2 (computed from start 0 and end 9223372036854775807 over shape with rank 2 and stride-1)\n\nAnswer:\nbox_xy = (K.sigmoid(feats[..., :2]) + grid) / K.cast(grid_shape[::-1], K.dtype(feats))box_wh = K.exp(feats[..., 2:4]) * anchors_tensor / K.cast(input_shape[::-1], K.dtype(feats))to:box_xy = (K.sigmoid(feats[..., :2]) + grid) / K.cast(grid_shape[..., ::-1], K.dtype(feats))box_wh = K.exp(feats[..., 2:4]) * anchors_tensor / K.cast(input_shape[..., ::-1], K.dtype(feats))\n\n问题三Question:\nTypeError: Tensors are unhashable. (KerasTensor(type_spec=TensorSpec(shape=(None, None, None, 3), dtype=tf.float32, name=&#x27;input_1&#x27;), name=&#x27;input_1&#x27;, description=&quot;created by layer &#x27;input_1&#x27;&quot;))Instead, use tensor.ref() as the key.\n\nAnswer:\nfrom keras import backend as K....self.sess = K.get_session()to: from keras import backend as Kimport tensorflow as tftf.compat.v1.disable_eager_execution().....self.sess = K.get_session()\n\n\n\n问题四Question:\nImportError: cannot import name &#x27;BatchNormalization&#x27; from &#x27;keras.layers.norm...\n\nAnswer:\nfrom keras.layers.normalization import BatchNormalizationto: from keras.layers.normalization.batch_normalization import BatchNormalization\n\nEND.\n","categories":["Python"],"tags":["Python","TensorFlow"]},{"title":"Ubuntu20.04编译安装Python3","url":"/2021/06/04/Ubuntu20.04%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Python3/","content":"前言记录下安装过程，以便日后查看。\n\nUbuntu 20.04.2 LTS (使用的Docker ubuntu:latest，可能会与其他环境略有不同。)\nPython 3.9.5 (发布前最新版本，其他版本操作相通。)\n\n以下操作都是基于ROOT权限下操作，如果不是或者权限不足，请在命令前添加 sudo\n环境依赖\n切换阿里云镜像源加速，Ubuntu 20.04，网络较好可以跳过，如需其他源请自行搜索替换。\n\n# 备份cp /etc/apt/sources.list /etc/apt/sources.list.backup# 写入echo &quot;deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse&quot; &gt; /etc/apt/sources.list# 更新apt update &amp;&amp; apt upgrade -y\n\n\n安装编译Python需要的依赖包，全面安装，为了编译后不出现各种问题，宁错杀一千不放过一个包。\n\n# 看需求安装 有些包是编译PHP用的 懒得拆分了 有强迫症的可以试试apt install gcc make wget curl build-essential autoconf automake m4 openssl libreadline-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev -yapt install libbz2-dev libxml2-dev libjpeg-dev libpng-dev libfreetype6-dev libzip-dev libssl-dev libsqlite3-dev libcurl4-openssl-dev libgmp3-dev libonig-dev libreadline-dev libxslt1-dev libffi-dev -y# apt install libpcre3-dev libjpeg62-dev libpng12-dev libpng3 libpnglite-dev libiconv-hook-dev libiconv-hook1 libmcrypt-dev libmcrypt4 libmhash-dev libmhash2 libltdl-dev libmysqlclient-dev libmagickcore-dev libmagickwand-dev libedit-dev -y\n\n下载\n选择需要的版本下载XZ Compressed source tabball，下载速度慢可以考虑镜像下载。\n\nPython下载官网 | Python3.9.5\nPython下载镜像 | Python3.9.5\nwget https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tar.xz# wget https://npm.taobao.org/mirrors/python/3.9.5/Python-3.9.5.tar.xz\n\n安装以Python3.9.5安装为例\n# 解包，解压缩xz -d Python-3.9.5.tar.xztar -xvf Python-3.9.5.tar# 进入目录cd Python-3.9.5# 编译./configure --prefix=/usr/local/python3.9.5 --enable-optimizations# --prefix=/usr/local/python3.9.5 预安装目录# --enable-optimizations 是优化选项(LTO，PGO 等)加上这个 flag 编译后，性能有 10% 左右的优化(看需求)# 安装make &amp;&amp; make install# 创建软链接 方便使用ln -s /usr/local/python3.9.5/bin/python3.9 /usr/local/bin/python3.9ln -s /usr/local/python3.9.5/bin/pip3.9 /usr/local/bin/pip3.9\n\n等待编译完成即可，如果没有什么其他的报错，应该就OK的。\n使用\n使用python3.9 xxx.py和pip3.9 install xxxx \n\n怎么喜欢怎么来\nroot@de9bc33b1a58:~# pip3.9 -Vpip 21.1.1 from /usr/local/python3.9.5/lib/python3.9/site-packages/pip (python 3.9)root@de9bc33b1a58:~# python3.9 -VPython 3.9.5root@de9bc33b1a58:~# python3.9Python 3.9.5 (default, Jun  3 2021, 12:04:16)[GCC 9.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import requests&gt;&gt;&gt; print(requests.get(&quot;http://ip-api.com/json&quot;).json())&#123;    &quot;status&quot;:&quot;success&quot;,    &quot;country&quot;:&quot;China&quot;,    &quot;countryCode&quot;:&quot;*&quot;,    &quot;region&quot;:&quot;*&quot;,    &quot;regionName&quot;:&quot;*&quot;,    &quot;city&quot;:&quot;*&quot;,    &quot;zip&quot;:&quot;&quot;,    &quot;lat&quot;:*,    &quot;lon&quot;:*,    &quot;timezone&quot;:&quot;Asia/Shanghai&quot;,    &quot;isp&quot;:&quot;*&quot;,    &quot;org&quot;:&quot;&quot;,    &quot;as&quot;:&quot;*&quot;,    &quot;query&quot;:&quot;*&quot;&#125;&gt;&gt;&gt;\n\nPIP源清华：https://pypi.tuna.tsinghua.edu.cn/simple阿里云：https://mirrors.aliyun.com/pypi/simple/中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/豆瓣：https://pypi.doubanio.com/simple/# pip3.9 install xxxx -i https://pypi.tuna.tsinghua.edu.cn/simple\n\nEND.\n","categories":["Python"],"tags":["Python"]},{"title":"和彩云网盘研究记录","url":"/2021/03/23/%E5%92%8C%E5%BD%A9%E4%BA%91%E7%BD%91%E7%9B%98%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/","content":"前言清一色的开篇，目的只为水一篇文章…本次研究对象 和彩云网盘(mCloud)7.3.4此记录更偏向于结果，只保证研究版本有效，去年分析的，今年才发，不保证有效  \n栗子\n账密方式登录\n\nPOST https://aas.caiyun.feixin.10086.cn/tellin/thirdlogin.do HTTP/1.1x-DeviceInfo: 1|10.0.3.15|1|7.3.4|Netease|MuMu|87AD2EDF19FFE5D7779D4191937FD5F0|08-00-27-e5-3d-e6|android 6.0.1|900X1600|zh|||x-ExpRoute-Code: routeCode=18880886001,type=10Accept-Charset: UTF-8x-NetType: 1x-MM-Source: 000x-SvcType: 1Accept: text/html,application/xhtml+xml,application/xml;Connection: keep-alivex-huawei-channelSrc: 10000023X-Tingyun-Id: p35OnrDoP8k;c=2;r=1339375589;Content-Type: text/plain; charset=utf-8Content-Length: 344Host: aas.caiyun.feixin.10086.cnAccept-Encoding: gzipUser-Agent: okhttp/3.11.0&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;&lt;msisdn&gt;18880886001&lt;/msisdn&gt;&lt;random/&gt;&lt;secinfo&gt;871D0A9E95ABA22B4604224CFBA24E605FABBC34&lt;/secinfo&gt;&lt;version&gt;572&lt;/version&gt;&lt;clienttype&gt;414&lt;/clienttype&gt;&lt;pintype&gt;9&lt;/pintype&gt;&lt;dycpwd/&gt;&lt;cpid&gt;58&lt;/cpid&gt;&lt;verfycode/&gt;&lt;requestip&gt;10.0.2.15&lt;/requestip&gt;&lt;mac/&gt;&lt;extInfo/&gt;&lt;UID/&gt;&lt;loginMode&gt;1&lt;/loginMode&gt;&lt;srvInfoVer/&gt;&lt;/root&gt;# 账密正确情况HTTP/1.1 200 OKSet-Cookie: JSESSIONID=DE25E78BB56608CD1C186B867BF33C67; Path=/tellin/; Secure; HttpOnlyContent-Type: text/plain;charset=utf-8Content-Length: 4992Date: Sun, 25 Oct 2020 04:35:41 GMTServer: HTTPS8F5060F5F1158B1CD0C081BA51C02C12DAD4C8F839CE2E44954B1DFE5A7C0137F0FA3FEB366B23A7B9EB4535AC403D0CDF26EB5973C647B26BEB85EBDCA65595AFFC1149A6D387........# 账密错误情况HTTP/1.1 200 OKSet-Cookie: JSESSIONID=87D4DF3AB2ABD9A5CEB777E26419377F; Path=/tellin/; Secure; HttpOnlyContent-Type: text/plain;charset=utf-8Content-Length: 86Date: Sun, 25 Oct 2020 04:33:13 GMTServer: HTTPS&lt;root&gt;&lt;return&gt;200050401&lt;/return&gt;&lt;desc&gt;The user information is incorrect.&lt;/desc&gt;&lt;/root&gt;\n\n观察以上登录请求发现加密的东西不少，请求头、请求体、响应体都有不同程度的加密    \n请求头(Request Headers)只写几个比较重要的，大部分可以为空或者默认值  \nx-DeviceInfox-DeviceInfo: 1|10.0.3.15|1|7.3.4|Netease|MuMu|87AD2EDF19FFE5D7779D4191937FD5F0|08-00-27-e5-3d-e6|android 6.0.1|900X1600|zh|||\n\n包含的东西比较多，以|分隔数据 ，下面表格按分割后的数据显示  \n\n\n\n原始数据\n代表内容\n\n\n\n1(1)\n网络类型\n\n\n10.0.3.15\nIP地址\n\n\n1(2)\n固定默认\n\n\n7.3.4\nSDK版本\n\n\nNetease\nMANUFACTURER\n\n\nMuMu\nMODEL\n\n\n87AD2EDF19FFE5D7779D4191937FD5F0\n生成UUID\n\n\n08-00-27-e5-3d-e6\nMAC地址\n\n\nandroid 6.0.1\nANDROID版本\n\n\n900X1600\n分辨率\n\n\nzh\n默认值\n\n\n空\n空\n\n\n空\n空\n\n\nx-ExpRoute-Codex-ExpRoute-Code: routeCode=18880886001,type=10\n\n\n\n\n原始数据\n代表内容\n\n\n\nrouteCode\n手机号\n\n\ntype\n如果是手机号登录 默认值为10\n\n\n请求体(Request Payload)内容组成为XML，大部分可以为空或者默认值  \nXML&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;root&gt;    &lt;msisdn&gt;18880886001&lt;/msisdn&gt;    &lt;random/&gt;    &lt;secinfo&gt;871D0A9E95ABA22B4604224CFBA24E605FABBC34&lt;/secinfo&gt;    &lt;version&gt;572&lt;/version&gt;    &lt;clienttype&gt;414&lt;/clienttype&gt;    &lt;pintype&gt;9&lt;/pintype&gt;    &lt;dycpwd/&gt;    &lt;cpid&gt;58&lt;/cpid&gt;    &lt;verfycode/&gt;    &lt;requestip&gt;10.0.2.15&lt;/requestip&gt;    &lt;mac/&gt;    &lt;extInfo/&gt;    &lt;UID/&gt;    &lt;loginMode&gt;1&lt;/loginMode&gt;    &lt;srvInfoVer/&gt;&lt;/root&gt;\n\n\n以下sha-1()、md5()等代表加密方式 , &#123;&#125;代表字符串拼接填充\n\n\n\n\n原始数据\n代表内容\n\n\n\nsecinfo\nsha-1(fetion.com.cn:{password})\n\n\n响应体(Response Payload)密文登录成功后，返回数据为一长串密文，需要搭配上下文的东西解密使用  \n8F5060F5F1158B1CD0C081BA51C02C12DAD4C8F839CE2E44954B1DFE5A7C0137F0FA3FEB366B23A7B9EB4535AC403D0CDF26EB5973C647B26BEB85EBDCA65595AFFC1149A6D387........\n\n# 拼接字符串add_key = GErfJus#Ofr%# 秘钥算法clientkeyDecrypt = md5(&#123;secinfo&#125;&#123;add_key&#125;) -&gt; substring(0, 16) -&gt; toUpperCase()# 解密算法result = AES() -&gt; decodeCerResponse(byte(response), byte(clientkeyDecrypt))\n\n\n算法为AES加密解密(ECB模式) , 解密秘钥为以上clientkeyDecryptclientkeyDecrypt 为MD5后取前16位转大写 , ECB模式无填充解密即可  \n\n&lt;root&gt;    &lt;return&gt;0&lt;/return&gt;    &lt;imspwd&gt;E7E673CD95AEF839206A15A62AFE60E5&lt;/imspwd&gt;    &lt;sbc&gt;&lt;/sbc&gt;    &lt;domain&gt;&lt;/domain&gt;    &lt;svnlist&gt;&lt;/svnlist&gt;    &lt;svnuser&gt;&lt;/svnuser&gt;    &lt;svnpwd&gt;&lt;/svnpwd&gt;    &lt;htslist&gt;&lt;/htslist&gt;    &lt;userType&gt;1&lt;/userType&gt;    &lt;userid&gt;1711h52AR1yI&lt;/userid&gt;    &lt;loginid&gt;160334480555369&lt;/loginid&gt;    &lt;heartime&gt;4&lt;/heartime&gt;    &lt;funcId&gt;1000000000000000&lt;/funcId&gt;    &lt;token&gt;gquJ43xQ|1|RCS|1605936805651|BnEaDQrCg8cUJ1Mp4GjV1.dmGoOVrB0meR52eij8PBOOtkY8x3c5MI92EP_rBWg4tuPUOLExb.wl724cetD5rUHz5BlW5OzaMK0Z6SiA52Kst0Nvt.sBnIi4bYK8x5etKwRZeTUya6ULgApq_vQgTdM9pCaqnaKiDV1vqBGXkaQ-&lt;/token&gt;    &lt;expiretime&gt;2592000&lt;/expiretime&gt;    &lt;authToken&gt;gquJ43xQ|1|RCS|1605936805651|BnEaDQrCg8cUJ1Mp4GjV1.dmGoOVrB0meR52eij8PBOOtkY8x3c5MI92EP_rBWg4tuPUOLExb.wl724cetD5rUHz5BlW5OzaMK0Z6SiA52Kst0Nvt.sBnIi4bYK8x5etKwRZeTUya6ULgApq_vQgTdM9pCaqnaKiDV1vqBGXkaQ-&lt;/authToken&gt;    &lt;atExpiretime&gt;2592000&lt;/atExpiretime&gt;    &lt;deviceid&gt;5617A97CE3EA4B7187F4A6D84CB02880&lt;/deviceid&gt;    &lt;serverinfo&gt;        &lt;mbhttpsurl&gt;https://ose1.caiyun.feixin.10086.cn:8542/isbo/openApi/&lt;/mbhttpsurl&gt;        &lt;fburl&gt;http://mrp.weibo.10086.cn&lt;/fburl&gt;        &lt;editurl&gt;http://edit.caiyun.feixin.10086.cn&lt;/editurl&gt;        &lt;mediaurl&gt;http://120.132.156.103:80&lt;/mediaurl&gt;        &lt;cmpassurl&gt;https://www.cmpassport.com&lt;/cmpassurl&gt;        &lt;cytxlurl&gt;https://auth.cytxl.com.cn&lt;/cytxlurl&gt;        &lt;fxcaptchaurl&gt;http://nav.fetion.com.cn&lt;/fxcaptchaurl&gt;        &lt;xmppaddr&gt;221.176.66.104:5225,221.176.66.104:5226,221.176.66.104:5227&lt;/xmppaddr&gt;        &lt;boshurl&gt;221.176.66.104:8081,221.176.66.104:8082,221.176.66.104:8083&lt;/boshurl&gt;        &lt;marketurl&gt;http://mcmm.caiyun.feixin.10086.cn:80&lt;/marketurl&gt;        &lt;invitecodeurl&gt;http://caiyun.feixin.10086.cn/i.jsp&lt;/invitecodeurl&gt;        &lt;pingurl&gt;http://221.176.66.99:80&lt;/pingurl&gt;        &lt;rifurl&gt;http://ose.caiyun.feixin.10086.cn:80/richlifeApp&lt;/rifurl&gt;        &lt;wapUrl&gt;http://caiyun.feixin.10086.cn:7070&lt;/wapUrl&gt;        &lt;rifhttpsurl&gt;https://ose.caiyun.feixin.10086.cn:443/richlifeApp&lt;/rifhttpsurl&gt;        &lt;chargeUrl&gt;https://cmmedia.caiyun.feixin.10086.cn:443&lt;/chargeUrl&gt;        &lt;isboUrl&gt;https://ose1.caiyun.feixin.10086.cn:8542&lt;/isboUrl&gt;        &lt;calURL&gt;http://ose.caiyun.feixin.10086.cn/richlifeApp&lt;/calURL&gt;        &lt;testTermConnectURL&gt;http://aas.caiyun.feixin.10086.cn/tellin/usr/puc/ispace/testTermConnect.do&lt;/testTermConnectURL&gt;    &lt;/serverinfo&gt;    &lt;account&gt;15802336010&lt;/account&gt;    &lt;expiryDate&gt;-1&lt;/expiryDate&gt;    &lt;areaCode&gt;23&lt;/areaCode&gt;    &lt;provCode&gt;23&lt;/provCode&gt;    &lt;userExtInfo&gt;        &lt;passID&gt;844163976&lt;/passID&gt;        &lt;AndID&gt;844163976&lt;/AndID&gt;        &lt;isRegWeibo&gt;-1&lt;/isRegWeibo&gt;        &lt;accessToken&gt;NTE1MUFCNjcxMTM2RjA1QTg3N0VBOUU4ODQzRjE3QkIyOEY2RjQ4Qzk5RUY4NUFDMEVBODMxOEQyRTk2NEU1ODo0NDYxMDE=&lt;/accessToken&gt;    &lt;/userExtInfo&gt;    &lt;srvInfoVer&gt;D071457A5A1AE65EADDB39E38EE3A2F8&lt;/srvInfoVer&gt;&lt;/root&gt;\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\u000f\n\n\n注意解密后数据尾部有N个\\x0f or \\x0b or \\x0c or \\x06可能为其他不同的字符，最好写通用匹配方式去除  \n\n实现\n仓库地址 和彩云-内容加解密代码逻辑比较简单，详情施工中…  \n\n总结该文章代码只为学习，麻烦未经允许禁止转载哦  \nEND.  \n","categories":["Reverse"],"tags":["CaiYun","10086","feixin","网盘","逆向"]},{"title":"如何给Python threading线程加个控制开关","url":"/2018/10/02/%E5%A6%82%E4%BD%95%E7%BB%99Python-threading%E7%BA%BF%E7%A8%8B%E5%8A%A0%E4%B8%AA%E6%8E%A7%E5%88%B6%E5%BC%80%E5%85%B3/","content":"前言Python3.6.6&#x2F;threading&#x2F;threading.Event,如何给每个线程加一个控制开关。\n需求分析在爬虫项目中,threading模块的使用率还是很高的,每个线程之间独立,如果一个线程成功完成了任务退出了，其他的线程还要继续跑吗? 会造成资源浪费,如何给线程之间弄个信号源,一个线程完成任务,其他线程及退出呢?当然可能有很多方法完成目的,我只把自己使用过的方法做个记录。\n实践test.py\nimport randomimport threadingclass Calculation(threading.Thread):    def __init__(self, signal):        threading.Thread.__init__(self)        # 开关控制        self.singal = signal    def run(self):        self.test()        return    def test(self):        while True:            num = random.randint(0, 100)            print(threading.currentThread(), num)            # 如果其他线程完成任务打开开关,当前线程就退出            if self.singal.isSet():                print(threading.currentThread(), &#x27;其他线程已经完成任务,退出!&#x27;)                break                            # 如果随机数符合了条件,就把开关打开            if num == 66:                print(threading.currentThread(), &#x27;当前线程完成任务,退出!&#x27;)                self.singal.set()                break        returnif __name__ == &#x27;__main__&#x27;:    # 初始“开关” ，默认值 False    event_obj = threading.Event()    # 线程列表    threads_list = []    # 开始线程 5个线程    for thread in range(0, 5):        threads_list.append(Calculation(signal=event_obj))    for t in threads_list:        t.start()    # for t in threads:    #     t.join()\n看看输出结果,也没什么其他好说的\n# 数据太长,删过一部分,重要的流程还在# \\Pythonvenv\\py3\\Scripts\\python.exe test.py&lt;Calculation(Thread-1, started 24500)&gt; 1&lt;Calculation(Thread-1, started 24500)&gt; 34&lt;Calculation(Thread-1, started 24500)&gt; 60&lt;Calculation(Thread-1, started 24500)&gt; 13&lt;Calculation(Thread-2, started 24400)&gt; 36&lt;Calculation(Thread-2, started 24400)&gt; 60&lt;Calculation(Thread-1, started 24500)&gt; 80&lt;Calculation(Thread-3, started 13304)&gt; 19&lt;Calculation(Thread-2, started 24400)&gt; 87&lt;Calculation(Thread-1, started 24500)&gt; 97&lt;Calculation(Thread-3, started 13304)&gt; 36&lt;Calculation(Thread-2, started 24400)&gt; 3&lt;Calculation(Thread-1, started 24500)&gt; 2&lt;Calculation(Thread-4, started 18092)&gt; 38&lt;Calculation(Thread-5, started 16736)&gt; 62&lt;Calculation(Thread-3, started 13304)&gt; 33&lt;Calculation(Thread-2, started 24400)&gt; 20&lt;Calculation(Thread-2, started 24400)&gt; 97&lt;Calculation(Thread-2, started 24400)&gt; 58&lt;Calculation(Thread-2, started 24400)&gt; 23&lt;Calculation(Thread-5, started 16736)&gt; 37&lt;Calculation(Thread-3, started 13304)&gt; 91&lt;Calculation(Thread-1, started 24500)&gt; 13&lt;Calculation(Thread-4, started 18092)&gt; 11&lt;Calculation(Thread-2, started 24400)&gt; 16&lt;Calculation(Thread-2, started 24400)&gt; 66&lt;Calculation(Thread-2, started 24400)&gt; 当前线程完成任务,退出!&lt;Calculation(Thread-3, started 13304)&gt; 64&lt;Calculation(Thread-1, started 24500)&gt; 19&lt;Calculation(Thread-4, started 18092)&gt; 92&lt;Calculation(Thread-5, started 16736)&gt; 24&lt;Calculation(Thread-3, started 13304)&gt; 其他线程已经完成任务,退出!&lt;Calculation(Thread-1, started 24500)&gt; 其他线程已经完成任务,退出!&lt;Calculation(Thread-4, started 18092)&gt; 其他线程已经完成任务,退出!&lt;Calculation(Thread-5, started 16736)&gt; 其他线程已经完成任务,退出!Process finished with exit code 0\n\n\n知识点# 定义一个开关obj = threading.Event() # 把开关传进每个线程# 查看开关的状态,返回True或False,默认值 Falseobj.isSet()# 打开开关,此时值为Trueobj.set()# 关闭开关,此时值为Falseobj.clear()\nEnd.\n","categories":["Python"],"tags":["python","threading"]},{"title":"安卓设备逆向分析字段指南","url":"/2022/01/21/%E5%AE%89%E5%8D%93%E8%AE%BE%E5%A4%87%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E5%AD%97%E6%AE%B5%E6%8C%87%E5%8D%97/","content":"前言安卓逆向分析中，一些必要清楚的字段。\n正文\n\n\n字段\n描述\n组成\n重复性\n备注\n\n\n\nAndroid ID\n安卓设备出厂生成的唯一设备ID\n16 位字符串\n理论上有 36的16次方种组合，不易出现重复\nROOT、刷机、恢复出厂设置时会被重置\n\n\nOAID\n移动安全联盟推出的匿名设备标识符\n32 位字符\n不易出现重复\n可手动重置、可恢复出厂设置重置 、Android 10以上可获取\n\n\nIMEI\n国际移动设备识别码\n15 位数字\n不易出现重复\n恢复出厂设置不会重置、但可软件伪造、Android 10以上不支持获取\n\n\nMac\n设备唯一网络标识、全球唯一识别码、各厂商区别划分\n48 位二进制数\n理论上有 2 ^ 48(281474976710656) 次方种组合，不易出现重复\n恢复出厂设置不会重置、但可软件伪造\n\n\nSerial\nAndroid 序列号(硬件)\n16 位字母字符串\n不易出现重复\n与硬件信息同步\n\n\nDrmID(Media)\nMediaDrm保护版权唯一ID\n长度根据各类算法不定长\n不易出现重复\n恢复出厂设置大概率不会被重置\n\n\nUUID\n随机序列码\n32位 16 进制字符\n不易出现重复\n随机性较强、不易校验\n\n\nBand\n基带相关信息\n根据各个OS不定长\n随硬件变化\n无\n\n\nBrand\n硬件手机品牌\n根据各个品牌不定长\n随品牌变化\n无\n\n\nModel\n品牌下的细分型号\n根据各个品牌不定长\n随品牌变化\n无\n\n\nManufacture\n制造厂商\n根据各个品牌不定长\n随品牌变化\n无\n\n\nBoot\n上次开机到当前时间\nUnix 时间戳(毫秒)\n随用户使用时长变化\n无\n\n\nDeviceId\n设备的唯一ID\n不定长字符串\n可能为IMEI、 MEID 或 ESN\n随手机环境变化\n\n\nSim Serial\nSim 卡的序列号\n无\n无\n装有 Sim 卡时可用\n\n\nEND.\n","categories":["Reverse"],"tags":["Android","Reverse"]},{"title":"小米AX9000折腾记录","url":"/2022/11/23/%E5%B0%8F%E7%B1%B3AX9000%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/","content":"前言小米AX9000折腾记录, 官方固件版本为AX9000 1.0.108.bin不是全量文章，整合流程，挑出部分重点，防止重复踩坑。\n正文通过虚拟机开启AX9000的SSH# 比较重点的一个脚本 下面会用到# /usr/lib/lua/luci/controller/admin/xqsystem.luamodule(&quot;luci.controller.admin.xqsystem&quot;, package.seeall)function index()    local page   = node(&quot;api&quot;)    page.target  = firstchild()    page.title   = (&quot;&quot;)    page.order   = 100    page.index = true    page   = node(&quot;api&quot;,&quot;xqsystem&quot;)    page.target  = firstchild()    page.title   = (&quot;&quot;)    page.order   = 100    page.index = true    entry(&#123;&quot;api&quot;, &quot;xqsystem&quot;, &quot;token&quot;&#125;, call(&quot;getToken&quot;), (&quot;&quot;), 103, 0x08)endlocal LuciHttp = require(&quot;luci.http&quot;)function getToken()    local result = &#123;&#125;    result[&quot;code&quot;] = 0    result[&quot;token&quot;] = &quot;; nvram set ssh_en=1; nvram set uart_en=1; nvram set boot_wait=on; nvram commit; uci set wireless.@wifi-iface[0].key=\\`mkxqimage -I\\`; uci commit; sed -i &#x27;s/channel=.*/channel=\\&quot;debug\\&quot;/g&#x27; /etc/init.d/dropbear; /etc/init.d/dropbear start;&quot;    LuciHttp.write_json(result)end\n\n\n重点是将OPENWRT路由器ip设置为169.254.31.1, 然后关闭DHCP。不然会出现各式报错。\n\n\nAX9000和AX6000获取SSH的方法\n\n\n重点是热点改成OpenWrt，密码12345678。以及热点网络适配器去掉ipv4的勾选项目。\n\n\n0成本用Win10热点和openwrt的vm虚拟机开启AX6000和AX9000的ssh\n\n\n重点是 wireless-ax9000.sh,也可以手动写入最上面的代码块。\n\n\n小米 AX9000 解锁 SSH 安装 ShellClash 教程\n\n# 注意URL的参数，按实际情况替换。# 05f18fc74244d28dea39a5b537765e92要替换成自己的# 如果ssid不是OpenWrt 或者密码不为12345678 也需要替换测试:  http://192.168.1.1/cgi-bin/luci/api/xqsystem/token测试:  http://192.168.31.1/cgi-bin/luci/;stok=05f18fc74244d28dea39a5b537765e92/api/xqsystem/tokenhttp://192.168.31.1/cgi-bin/luci/;stok=05f18fc74244d28dea39a5b537765e92/api/xqsystem/extendwifi_connect_inited_router?ssid=OpenWrt&amp;password=12345678&amp;encryption=WPA2PSKenctype=CCMP&amp;channel=11&amp;band=2g&amp;admin_username=root&amp;admin_password=admin&amp;admin_nonce=xxx\n\n\n虚拟机搭建OpenWrt\n将OPENWRT路由器ip设置为169.254.31.1\n关闭OpenWrt的DHCP\n使用wireless-ax9000.sh 或者 手动写入代码块 xqsystem.lua\n成功后再次打开路由器后台查看 5G 频段 Wi-Fi 密码，这个 Wi-Fi 密码就是我们默认的 ssh 密码，\n\n\n以上最好是都在2.4G频段进行。几个教程需要搭配使用，看重点，可以多阅读几遍。\n\n永久获取SSH权限(固化SSH)\n请注意有变砖风险，可以跳过这部分。\n\n项目地址 paldier&#x2F;ax3600_tool\n# 提前备份(最好下载保存)$ nanddump -f /tmp/bdata_mtd9.img /dev/mtd9# 将项目文件传到/tmp目录 给权限$ chmod +x /tmp/mitool*# 解锁分区锁$ /tmp/mitool.sh unlock# 自动重启并重新锁定分区锁$ /tmp/mitool.sh hack# 显示密码$ /tmp/mitool.sh password# 显示SN$ /tmp/mitool.sh sn# 如升级后ssh被禁用可以用telnet登录$ sed -i &#x27;s/channel=.*/channel=&quot;debug&quot;/g&#x27; /etc/init.d/dropbear$ /etc/init.d/dropbear start# 至此基本可以保证机器长期拥有root权限\n\n参考教程:小米ax3600&#x2F;ax6000&#x2F;ax9000&#x2F;ax5&#x2F;ax6获取root权限ax9000永久获取ssh权限\n刷QSDK&amp;&amp;OpenWrt的方法# 1.这一部是设置env保证小米固件在分区rootfs里，为下一部把qsdk刷到rootfs_1做准备$ nvram set flag_last_success=0$ nvram set flag_boot_rootfs=0$ nvram set flag_try_sys1_failed=0$ nvram set flag_try_sys2_failed=0$ nvram commit$ reboot# 2.小米原版固件下ssh命令写入qsdk固件，把固件上传到/tmp目录$ . /lib/upgrade/platform.sh$ switch_layout linux$ ubiformat /dev/mtd22 -y -f /tmp/openwrt-ipq807x-generic-xiaomi_ax9000-squashfs-nand-factory.bin$ nvram set flag_last_success=1$ nvram set flag_boot_rootfs=1$ nvram commit$ reboot# 这里刷固件就结束了，以下是切换分区。# 3.QSDK固件下恢复到原版固件$ fw_setenv  flag_last_success 0$ fw_setenv flag_boot_rootfs 0$ reboot# 4.原版固件恢复到QSDK固件$ nvram set flag_last_success=1$ nvram set flag_boot_rootfs=1$ nvram commit$ reboot\n\n\n这里刷完是两个分区，可以官方固件和openwrt来回切换。注意如果要重新刷，需要先执行3到原版固件，再执行2写入固件。\n\n参考教程:\n\n小米ax9000刷qsdk,openwrt的方法\n小米红米路由器AX6刷第三方openwrt固件\n\n第三方固件地址\n【Openwrt开发版每周五更新】新版AX6&#x2F;AX3600&#x2F;AX9000(QSDK),NSS,组网,jd,多播,小猫咪\n开发版 jingleijack&#x2F;Openwrt_Beta\n小米 AX9000 OpenWrt R21.7.1.10 最新源码、V兔出国海淘海淘、clash、打倒美帝、JD.\n\nAdGuardHome\nAdGuardHome去广告和DNS正确姿势\nAdGuard Home设置指南\nopenwrt插件 AdGuardHome学习与分享\nAdGuard Home正确使用姿势&#x2F;去广告&#x2F;防污&#x2F;加速解析\n\n1. AdGuardHome管理面板账号密码 root-admin 或者root-password2. \n\n挂载U盘到&#x2F;overlayAX9000默认的分区大小不足以正常使用软件，所以需要挂载U盘扩容空间请注意要提前把U盘格式化成ext4\n# 检测U盘是否插入$ cat /proc/scsi/usb-storage/0# 写入以下代码块$ vim /etc/init.d/miwifi_overlay # 这里使用AX6的一段代码来挂载overlay  #!/bin/sh /etc/rc.commonSTART=00. /lib/functions/preinit.shstart() &#123;        [ -e /data/overlay ] || mkdir /data/overlay        [ -e /data/overlay/upper ] || mkdir /data/overlay/upper        [ -e /data/overlay/work ] || mkdir /data/overlay/work        mount --bind /data/overlay /overlay        fopivot /overlay/upper /overlay/work /rom 1        #Fixup miwifi misc, and DO NOT use /overlay/upper/etc instead, /etc/uci-defaults/* may be already removed        /bin/mount -o noatime,move /rom/data /data 2&gt;&amp;-        /bin/mount -o noatime,move /rom/etc /etc 2&gt;&amp;-        /bin/mount -o noatime,move /rom/ini /ini 2&gt;&amp;-        /bin/mount -o noatime,move /rom/userdisk /userdisk 2&gt;&amp;-        return 0&#125;# 给权限$ chmod 755 /etc/init.d/miwifi_overlay$ /etc/init.d/miwifi_overlay enable$ sync $ reboot\n\n重启后浏览器登录luci界面，点击系统-&gt;挂载点。在挂载点的下方点击修改按钮。\n\n挂载点选择作为外部overlay使用(&#x2F;overlay)(不要选择其他选项)，点击保存，再点击保存&amp;应用。\n\n在命令行输入reboot执行路由器重启。重启后路由器可能会恢复出厂设置。 重启后打开系统-&gt;软件包，可以看见空闲空间已经变大。\n\n挂载完成，这里参考了OpenWrt挂载U盘OPENWRT | ESXI 下 OpenWrt扩容Overlay,增加安装插件空间\n解决OpenWRT安装第三方包错误root@OpenWrt:~# opkg print-architecturearch all 1arch noarch 1arch aarch64_cortex-a53_neon-vfpv4 10\n\n把返回的回显复制到opkg的设置里倒数第二行加一行，修改后如下\nroot@OpenWrt:~# opkg print-architecturearch all 1arch noarch 1arch aarch64_cortex-a53 8arch aarch64_cortex-a53_neon-vfpv4 10\n\n但是因为ipq807x并没有适配，所以一些包最好是手动下载安装，手动安装依赖。\n换国内源# 注意 19.07-SNAPSHOThttps://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07-SNAPSHOT/packages/# 注意 ipq807xhttps://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07-SNAPSHOT/targets/ipq807x/# 注意 aarch64_cortex-a53https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/19.07-SNAPSHOT/packages/aarch64_cortex-a53/\n\n额外的插件\n解锁网易云灰色歌曲\nUnblockNeteaseMusic\nluci-app-unblockmusic（二次修改）\nUnblockNeteaseMusic(在用)\nsirpdboy-package\n\n安装额外软件\nPython3\n\n# 软件包界面手动安装或者命令# Python$ opkg install python3$ opkg install python3-pip# gcc$ opkg install gcc automake autoconf libtool make\n\n\nNodejs\n\n别名# 或者写入/etc/profile$ alias pq3=&#x27;pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple $1&#x27;\n\n额外命令# 安装用户相关$ opkg install shadow-groupadd shadow-groupdel shadow-useradd shadow-userdel shadow-usermod# 添加普通用户并且设置密码$ echo &quot;testuser:*:1000:65534:testuser:/tmp:/bin/ash&quot; &gt;&gt; /etc/passwd$ passwd testuser# 删除用户$ userdel -r testuser\n\n安装libcap*安装libcap  libcap-bin, 因为新版本变成了libcap-ng  libcap-ng-bin\n# 手动https://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/base/libcap_2.51-1_aarch64_cortex-a53.ipkhttps://downloads.openwrt.org/snapshots/packages/aarch64_cortex-a53/base/libcap-bin_2.51-1_aarch64_cortex-a53.ipk# 修改下快照源，替换自己架构$ src/gz snapshots https://downloads.openwrt.org/snapshots/packages/&#123;architecture&#125;/base# $ opkg update$ opkg install libcap libcap-bin --force-depends\n\nAX9000(开发版)1.0.140 挂载&#x2F;overlay给U盘分区，ext4格式。分两个或者多个以上，第一个分区要大，给Docker用的 ,第二个分区给&#x2F;overlay。\n\n注意要关闭docker\n\n# 查看挂载的U盘分区$ df -h/dev/sda1                55.0G      4.7G     47.5G   9% /extdisks/sda1/dev/sda1                55.0G      4.7G     47.5G   9% /mnt/docker_disk/dev/sda2                 2.5G     43.6M      2.3G   2% /extdisks/sda2/dev/sda1                55.0G      4.7G     47.5G   9% /mnt/docker_disk/mi_docker/lib/docker\n\n把分区好挂载到mount &#x2F;sda3\n# 如果报错不存在文件夹  可能需要手动创建/mnt/sda2$ mount /dev/sda2 /mnt/sda2# 如果上面报错 使用这个$ mount -o rw /dev/sda2 /mnt/sda2\n\n挂载检测是否完成\n$ ls /mnt/sda2\n\n迁移Overly\n$ cd /overlay$ cp -r /overlay/* /mnt/sda2$ ls /mnt/sda2\n\n设置开机自动挂载\n# /etc/rc.localecho 1 &gt; /sys/fs/cgroup/memory/memory.use_hierarchy#添加以下这句挂载命令mount /dev/sda2 /overlay exit 0\n\nAX9000(开发版)1.0.140 Docker创建macvlan(这个版本暂时不支持)# 开启网卡混杂模式$ ip link set br-lan promisc on$ docker network create -d macvlan \\    --subnet=192.168.31.0/24 --gateway=192.168.31.1 \\    -o parent=br-lan \\    -o macvlan_mode=bridge \\    macnet\n\nAX9000(开发版)1.0.140 Docker安装使用AdGuard HomeAX9000 Docker介绍\n\n以下大部分bash命令需要在ssh里操作\n\nDocker国内镜像源\n\n\n名称\n路径\n\n\n\n网易\nhttp://hub-mirror.c.163.com\n\n\n中国官方镜像\nhttps://registry.docker-cn.com\n\n\n中国科技大学\nhttps://docker.mirrors.ustc.edu.cn\n\n\n阿里云镜像\nhttps:&#x2F;&#x2F;[xxx].mirror.aliyuncs.com\n\n\n拉取镜像# Portainer UI界面 搜索并拉取adguard/adguardhome# 命令行$ docker pull adguard/adguardhome\n\n部署镜像\nName, 随意\nImage, adguard&#x2F;adguardhome\nAlways pull the image, 可以关掉\nVolumes, 设置挂载目录持久化(可选) e.g &#x2F;root&#x2F;workspace&#x2F;adguard&#x2F;workdir:&#x2F;opt&#x2F;adguardhome&#x2F;work &#x2F;root&#x2F;workspace&#x2F;adguard&#x2F;confdir:&#x2F;opt&#x2F;adguardhome&#x2F;conf\nPublish all exposed network ports to random host ports, (随机暴露端口)打开\nManual network port publishing, 手动添加 5553:53 tcp|5553:53 udp|3000:3000 tcp\nNetwork, bridge\nRestart policy, Always\n\n等待部署完成, 设置地址访问192.168.31.1:3000, 根据需求设置(可百度设置教程)。\n汉化Portainer$ cd /tmp$ curl -sL https://ghproxy.com/https://github.com/eysp/public/archive/public.tar.gz | tar xz$ rm -rf public$ mv public-public public$ docker stop portainer$ docker cp public portainer:/$ docker start portainer\n\n刷新页面即可\nDnsmasq转发到AdgHome# vim /etc/dnsmasq.conf 最后添加# port=53server=127.0.0.1#5553                  server=192.168.31.1#5553no-resolv        dns-forward-max=100000 \n\n重启后即可使用AdgHome，注意这里使用的是转发，所以Adg里的客户端显示的都是本地地址。不要尝试使用Adg的53端口来替换dnsmasq的53，会有大问题。也不要尝试再DCHP里设置DNS，会有大问题。\n备份AdGuardHome.yaml仅供参考\nbind_host: 0.0.0.0bind_port: 3000beta_bind_port: 0users:  - name: root    password: $2y$10$FfeQavihMUiXCuJhHuQwy.6EOXDvkXb/S50qI5fXizqarNT/ShhQmauth_attempts: 5block_auth_min: 15http_proxy: &quot;&quot;language: &quot;&quot;rlimit_nofile: 0debug_pprof: falseweb_session_ttl: 720dns:  bind_hosts:    - 0.0.0.0  port: 5553  statistics_interval: 7  querylog_enabled: true  querylog_file_enabled: true  querylog_interval: 1  querylog_size_memory: 1000  anonymize_client_ip: false  protection_enabled: true  blocking_mode: nxdomain  blocking_ipv4: &quot;&quot;  blocking_ipv6: &quot;&quot;  blocked_response_ttl: 10  parental_block_host: family-block.dns.adguard.com  safebrowsing_block_host: standard-block.dns.adguard.com  ratelimit: 0  ratelimit_whitelist: [ ]  refuse_any: false  upstream_dns:    - 221.7.92.98    - 221.5.203.98    - 114.114.114.114    - 223.5.5.5    - 114.114.115.115    - 119.29.29.29    - 8.8.8.8    - 1.1.1.1    - 2408:8663::2    - 2408:8662::2    - https://dns.alidns.com/dns-query    - https://doh.pub/dns-query    - https://doh.360.cn/dns-query    - https://doh.pub/dns-query    - https://dns.google/dns-query    - https://dns.adguard.com/dns-query    - https://dns.quad9.net/dns-query  upstream_dns_file: &quot;&quot;  bootstrap_dns:    - 221.7.92.98    - 221.5.203.98    - 2408:8663::2    - 2408:8662::2    - 114.114.114.114    - 223.5.5.5    - 119.29.29.29    - 1.1.1.1    - 8.8.8.8  all_servers: true  fastest_addr: false  allowed_clients: [ ]  disallowed_clients: [ ]  blocked_hosts:    - version.bind    - id.server    - hostname.bind  cache_size: 4194304  cache_ttl_min: 0  cache_ttl_max: 0  bogus_nxdomain: [ ]  aaaa_disabled: false  enable_dnssec: false  edns_client_subnet: false  max_goroutines: 300  ipset: [ ]  filtering_enabled: true  filters_update_interval: 24  parental_enabled: false  safesearch_enabled: false  safebrowsing_enabled: false  safebrowsing_cache_size: 1048576  safesearch_cache_size: 1048576  parental_cache_size: 1048576  cache_time: 30  rewrites: [ ]  blocked_services: [ ]  local_domain_name: lan  resolve_clients: true  local_ptr_upstreams: [ ]tls:  enabled: false  server_name: &quot;&quot;  force_https: false  port_https: 443  port_dns_over_tls: 853  port_dns_over_quic: 784  port_dnscrypt: 0  dnscrypt_config_file: &quot;&quot;  allow_unencrypted_doh: false  strict_sni_check: false  certificate_chain: &quot;&quot;  private_key: &quot;&quot;  certificate_path: &quot;&quot;  private_key_path: &quot;&quot;filters:  - enabled: true    url: https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt    name: AdGuard Simplified Domain Names filter    id: 1  - enabled: false    url: https://adaway.org/hosts.txt    name: AdAway    id: 2  - enabled: false    url: https://hosts-file.net/ad_servers.txt    name: hpHosts - Ad and Tracking servers only    id: 3  - enabled: false    url: https://www.malwaredomainlist.com/hostslist/hosts.txt    name: MalwareDomainList.com Hosts List    id: 4  - enabled: false    url: https://raw.githubusercontent.com/vokins/yhosts/master/data/tvbox.txt    name: tvbox    id: 1575018007  - enabled: false    url: https://cdn.jsdelivr.net/gh/neoFelhz/neohosts@gh-pages/full/hosts.txt    name: neoHosts full    id: 1575618240  - enabled: false    url: https://hosts.nfz.moe/basic/hosts    name: neoHosts basic    id: 1575618241  - enabled: false    url: http://sbc.io/hosts/hosts    name: StevenBlack host basic    id: 1575618242  - enabled: false    url: http://sbc.io/hosts/alternates/fakenews-gambling-porn-social/hosts    name: StevenBlack host+fakenews + gambling + porn + social    id: 1575618243  - enabled: true    url: https://anti-ad.net/easylist.txt    name: anti-AD 命中率高、兼容性强    id: 1632419612  - enabled: true    url: https://gitee.com/halflife/list/raw/master/ad.txt    name: halflife合并乘风    id: 1632419613  - enabled: true    url: https://banbendalao.coding.net/p/adgk/d/ADgk/git/raw/master/ADgk.txt    name: adgk手机去广告规则    id: 1632419619  - enabled: true    url: https://cdn.jsdelivr.net/gh/zsakvo/AdGuard-Custom-Rule@master/rule/zhihu.txt    name: Zhihu App 广告屏蔽    id: 1632824652  - enabled: true    url: https://www.i-dont-care-about-cookies.eu/abp    name: I don&#x27;t care about cookies    id: 1636012831  - enabled: true    url: https://cdn.jsdelivr.net/gh/Goooler/1024_hosts@master/hosts    name: 1024_hosts    id: 1636012832  - enabled: true    url: https://cdn.jsdelivr.net/gh/jdlingyu/ad-wars@master/hosts    name: 大圣净化    id: 1636012833  - enabled: true    url: https://cdn.jsdelivr.net/gh/cjx82630/cjxlist@master/cjx-annoyance.txt    name: CJX&#x27;s Annoyance List    id: 1636012834  - enabled: true    url: https://cdn.jsdelivr.net/gh/Moexin/AdGuardHome/AdGuardHome.list    name: AdGuardHome.list    id: 1636012836  - enabled: true    url: https://cdn.jsdelivr.net/gh/Moexin/AdGuardHome/Neo-Dev-Host.list    name: Neo-Dev-Host.list    id: 1636012837whitelist_filters: [ ]user_rules:  - &#x27;||active.tc.skysrt.com^&#x27;  - &#x27;||ad.3.cn^&#x27;  - &#x27;||admaster.com.cn^&#x27;  - &#x27;||alog.umeng.com^&#x27;  - &#x27;||amdcopen.m.taobao.com^&#x27;  - &#x27;||api.app.skysrt.com^&#x27;  - &#x27;||api.device.skysrt.com^&#x27;  - &#x27;||api.hoisin.hw.coocaatv.com^&#x27;  - &#x27;||api.home.skysrt.com^&#x27;  - &#x27;||api.skyworthiot.com^&#x27;  - &#x27;||api.upgrade.skysrt.com^&#x27;  - &#x27;||api-app.coocaa.ottcn.com^&#x27;  - &#x27;||api-home.coocaa.ottcn.com^&#x27;  - &#x27;||api-home.skysrt.com^&#x27;  - &#x27;||api-upgrade.coocaa.ottcn.com^&#x27;  - &#x27;||app.snm0516.aisee.tv^&#x27;  - &#x27;||btrace.play.t002.ottcn.com^&#x27;  - &#x27;||business.video.tc.skysrt.com^&#x27;  - &#x27;||cl-dl.cc0808.com^&#x27;  - &#x27;||clog.skysrt.com^&#x27;  - &#x27;||conf-darwin.xycdn.com^&#x27;  - &#x27;||connect.play.aiseet.atianqi.com^&#x27;  - &#x27;||data-dl.skysrt.com^&#x27;  - &#x27;||data-hoisin.coocaa.com^&#x27;  - &#x27;||dl.skysrt.com^&#x27;  - &#x27;||dp3.play.t002.ottcn.com^&#x27;  - &#x27;||gs.getui.com^&#x27;  - &#x27;||hoisin.coocaa.com^&#x27;  - &#x27;||hoisin.coocaatv.com^&#x27;  - &#x27;||irs01.com^&#x27;  - &#x27;||kaola.com^&#x27;  - &#x27;||livep.l.t002.ottcn.com^&#x27;  - &#x27;||log.skysrt.com^&#x27;  - &#x27;||mdp-at.geely.com^&#x27;  - &#x27;||member.coocaa.com^&#x27;  - &#x27;||miaozhen.com^&#x27;  - &#x27;||mtrace.play.t002.ottcn.com^&#x27;  - &#x27;||ocsp.int-x3.letsencrypt.org^&#x27;  - &#x27;||p.tencentmind.com^&#x27;  - &#x27;||play.t002.ottcn.com^&#x27;  - &#x27;||push.tc.skysrt.com^&#x27;  - &#x27;||push.tvos.skysrt.com^&#x27;  - &#x27;||puui.qpic.cn^&#x27;  - &#x27;||qr.coocaa.com^&#x27;  - &#x27;||res.hoisin.coocaatv.com^&#x27;  - &#x27;||rpc-tc.skysrt.com^&#x27;  - &#x27;||rpt-gdt.play.t002.ottcn.com^&#x27;  - &#x27;||s.jpush.cn^&#x27;  - &#x27;||sdk1xyajs.data.p2cdn.com^&#x27;  - &#x27;||sis.jpush.io^&#x27;  - &#x27;||sky.tvos.skysrt.com^&#x27;  - &#x27;||skyworthdigital.com^&#x27;  - &#x27;||skyworthiot.com^&#x27;  - &#x27;||stats.jpush.cn^&#x27;  - &#x27;||status.tvos.skysrt.com^&#x27;  - &#x27;||status2.tvos.skysrt.com^&#x27;  - &#x27;||sv.video.qq.com^&#x27;  - &#x27;||taps.net^&#x27;  - &#x27;||tq.skysrt.com^&#x27;  - &#x27;||tracker.appadhoc.com^&#x27;  - &#x27;||tvapp.hpplay.cn^&#x27;  - &#x27;||tvos.skysrt.com^&#x27;  - &#x27;||tx.ctrmi.cn^&#x27;  - &#x27;||umengacs.m.taobao.com^&#x27;  - &#x27;||uop.umeng.com^&#x27;  - &#x27;||update01.skyworth-cloud.com.wswebpic.com^&#x27;  - &#x27;||update01.skyworth-cloud.com^&#x27;  - &#x27;||vqq.admaster.com.cn^&#x27;  - &#x27;||webapp.skysrt.com^&#x27;  - &#x27;||bak.bajintech.com^$important^&#x27;  - &#x27;||iwd.skysrt.com^$important^&#x27;  - &#x27;||ipv4only.arpa^$important^&#x27;  - &#x27;||api.bajintech.com^$important^&#x27;  - &#x27;||wifimodule.doubimeizhi.com^$important^&#x27;  - &#x27;||msy59wz.mqtt.iot.gz.baidubce.com^$important^&#x27;  - &#x27;||i.ytimg.com^$important^&#x27;  - &#x27;# 百家号&#x27;  - &#x27;||baijiahao.baidu.com^&#x27;  - &#x27;@@||apisoft.df0535.com^&#x27;  - &quot;&quot;dhcp:  enabled: false  interface_name: &quot;&quot;  dhcpv4:    gateway_ip: &quot;&quot;    subnet_mask: &quot;&quot;    range_start: &quot;&quot;    range_end: &quot;&quot;    lease_duration: 86400    icmp_timeout_msec: 1000    options: [ ]  dhcpv6:    range_start: &quot;&quot;    lease_duration: 86400    ra_slaac_only: false    ra_allow_slaac: falseclients: [ ]log_compress: falselog_localtime: falselog_max_backups: 0log_max_size: 100log_max_age: 3log_file: &quot;&quot;verbose: falseschema_version: 10\n\nOpenWrt关闭LED灯(暂未测试)$ vim /etc/rc.d/S99turnoffled\n\n#!/bin/ashfor  i  in  ` ls  /sys/class/leds `docd  /sys/class/ledscd  $iecho  0 &gt; brightnessdone\n\n安装lsusb命令$ opkg update$ opkg install usbutils\n\nOpenWrt关闭OPKG检查签名$ vi /etc/opkg.conf\n\n# 注释掉这一行#option check_signature\n\n注意事项\n只有QSDK固件里面有CPU调速软件\nQSDK网络好，OpenWrt插件多\n信道3648，149161\n…\n\n相关项目除了文章中引用的项目，还有以下可能会用到的关联:\n\nAX9000和AX6000已经可以获取SSH了\n使用虚拟机解锁红米ax6-ssh并刷入qsdk固件\nOpenWrt support for Xiaomi AX9000\nXiaomi router AX9000\nOpenWrt_Build openwrt-autobuild\n小米路由器修复工具 \n\n\n\n\nEND.\n","categories":["Router"],"tags":["tittle-tattle"]},{"title":"树莓派4B随记","url":"/2022/01/14/%E6%A0%91%E8%8E%93%E6%B4%BE4B%E9%9A%8F%E8%AE%B0/","content":"前言记录一些树莓派4B的记录，使用的是树莓派爱好者基地64位系统2.0正式版(Debian)的系统。\n工具记录\nRaspberry Pi OS\nSDFormatter\nwin32diskimager\nwww.advanced-ip-scanner\nDebian-Pi-Aarch64\nbalenaEtcher\n\n基础设置开启SSH$ new-item ssh -type file\n\n配置wifi连接文件$ vim wpa_supplicant.conf\n\ncountry=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1 network=&#123;ssid=&quot;909&quot;psk=&quot;1393877285&quot;key_mgmt=WPA-PSKpriority=1&#125; network=&#123;ssid=&quot;WiFi-B&quot;psk=&quot;12345678&quot;key_mgmt=WPA-PSKpriority=2scan_ssid=1&#125;#ssid:网络的ssid#psk:密码#priority:连接优先级，数字越大优先级越高（不可以是负数）#scan_ssid:连接隐藏WiFi时需要指定该值为1\n\n编译安装python3.9.9更新系统$ sudo apt update$ sudo apt upgrade\n\n安装环境依赖$ sudo apt install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev libffi-dev -y \n\n\n注意如果没安装libffi-dev的话可能会出现ModuleNotFoundError: No module named &#39;_ctypes&#39;错误\n\n下载&amp;解压$ wget https://npm.taobao.org/mirrors/python/3.9.9/Python-3.9.9.tgz$ tar zxvf Python-3.9.9.tgz$ cd Python-3.9.9\n\n编译安装# --enable-optimizations(优化参数 自选)$ sudo ./configure --enable-optimizations$ sudo make $ sudo make install# 等待完成检查$ ls -al /usr/local/bin/python*\n\n添加PIP aliasalias pq3.9=&#x27;sudo pip3.9 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com&#x27;\n\n替换默认Python$ sudo rm /usr/bin/python$ sudo ln -s /usr/bin/python3.9 /usr/bin/python$ python\n\n安装oh-my-zsh$ sh -c &quot;$(curl -fsSL https://ghproxy.com/https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;$ git clone https://ghproxy.com/https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting$ git clone https://ghproxy.com/https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions$ git clone https://ghproxy.com/https://github.com/zsh-users/zsh-completions $&#123;ZSH_CUSTOM:=~/.oh-my-zsh/custom&#125;/plugins/zsh-completions$ git clone https://ghproxy.com/https://github.com/dracula/zsh.git $&#123;ZSH_CUSTOM:=~/.oh-my-zsh/themes/\n\n结束End\n","categories":["Pi"],"tags":["树莓派","4b"]},{"title":"获取基于OpenWrite的博文密码","url":"/2022/01/14/%E8%8E%B7%E5%8F%96%E5%9F%BA%E4%BA%8EOpenWrite%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81/","content":"前言一些博文阅读到一半的时候，会有个阅读全文的按钮。点击后需要你关注公众号，获取密码或暗号或验证码。本文只针对 该工具由 openwrite.cn 免费提供相关的关键字。\n正文\n右键查看网页源代码, 搜索blogId关键字。\n获取到类似1234-1612312341234-123的值。\n对接到以下请求进行获取即可。\n\n# 格式https://my.openwrite.cn/code/generate?blogId=&#123;blogId&#125;# 例子https://my.openwrite.cn/code/generate?blogId=1234-1612312341234-123\n\nEND.\n","categories":["Router"],"tags":["blog","OpenWrite"]},{"title":"让Python多线程响应Ctrl+C","url":"/2018/09/23/%E8%AE%A9Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%93%8D%E5%BA%94Ctrl-C/","content":"前言Python的threading模块，没有提供线程退出的方法。如果程序多线程是死循环，即使CTRL+C也没有任何效果。\n响应方法for t in thread_list:    # 设置守护    t.setDaemon(True)    t.start()# 响应Ctrl+Cwhile True:    pass\n\n补充setDaemon(True):，是把子线程设置为守护线程，主线程和子线程会同时运行，主线程结束运行后，无论子线程运行与否，都会和主线程一起结束。所以我们结束空循环的时候，子线程也会退出。\njoin():join函数会使得主调线程阻塞，直到被调用线程运行结束或超时，才执行主线程。\n\n只需要设置守护线程，挂一个空循环就好了\n\nEnd.\n","categories":["Python"],"tags":["python","threading"]},{"title":"限制Docker容器上下行带宽","url":"/2024/04/15/%E9%99%90%E5%88%B6Docker%E5%AE%B9%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%A1%8C%E5%B8%A6%E5%AE%BD/","content":"前言在某些国内云服务器商，如果服务器带宽较小或者有Docker容器会跑满服务器带宽。持续的高上下行，可能会收到一些服务器警告，或者怀疑被攻击而被封禁。这个时候需要限制一些流量的进出带宽，以下针对Linux环境操作。\n正文安装WonderShaperWonderShaper是一个允许用户限制一个或多个网络适配器带宽的脚本，依赖于tc流量控制工具。\n\n  \n    以下命令都基于root权限执行，否则请使用sudo前缀执行。\n\n  \n\n# 拉取仓库$ git clone https://github.com/magnific0/wondershaper.git# 测试$ cd wondershaper &amp;&amp; ./wondershaper -h# 安装到系统$ make install\n\n\n  \n    注意一些服务器未安装tc流量控制工具，需要进行额外安装。\n\n  \n\n# Centos 8$ yum install -y iproute-tc# Ubuntu$ apt-get install iproute2\n\n使用WonderShaper限流查看需要的网卡名称\n这里以docker的网卡为例，当然有需要限制其他网卡同理。\n\n$ ip addr$ ip addr show\n\n设置网卡上下行\ndocker0为网卡名称，-d为下行、-u为上行，单位为Kbps\n\n# 限制docker0网卡为2M的上下行$ wondershaper -a docker0 -d 2048 -u 2048# 只限制下行$ wondershaper -a docker0 -d 2048# 只限制上行$ wondershaper -a docker0 -u 2048\n\n查看网卡状态$ wondershaper -s -a docker0\n\n恢复网卡上下行限制$ wondershaper -c -a docker0\n\n使用iftop查看限流状态iftop是监控某个应用或网卡流量的工具。这里只是为了方便终端查看。也有其他同类型的，比如nload、nethogs等等。\n安装\n这里仅以Centos为例\n\n$ yum install -y iftop\n\n使用显示本机所有进程的进出流量$ iftop\n\n查看指定网卡的进出流量$ iftop -i docker0\n\n显示端口信息$ iftop -i docker0 -P\n\nEnd\n其他工具: vnstat\n\n本环境是因为没有多余的容器，所以直接限制的docker0网卡不会影响到其他服务。\n有其他单独需求，限制单个容器的虚拟网卡应该同理。\n","categories":["Docker"],"tags":["Docker"]}]